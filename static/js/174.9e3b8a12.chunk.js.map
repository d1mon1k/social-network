{"version":3,"file":"static/js/174.9e3b8a12.chunk.js","mappings":"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","sources":["webpack://react-samurai-way/./src/pages/PeoplePage/PeoplePage.module.scss?a8dc","pages/PeoplePage/PeoplePage.tsx","pages/PeoplePage/PeoplePageContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"usersIFollowSection\":\"PeoplePage_usersIFollowSection__J-2O9\",\"usersSection\":\"PeoplePage_usersSection__b6PEL\",\"usersTabs\":\"PeoplePage_usersTabs__5frjD\",\"tabItem\":\"PeoplePage_tabItem__aN0Lj\",\"active\":\"PeoplePage_active__v8x+u\",\"totalCount\":\"PeoplePage_totalCount__lc8w5\",\"tabsRow\":\"PeoplePage_tabsRow__+HUS7\",\"searchInput\":\"PeoplePage_searchInput__x+D6h\",\"usersList\":\"PeoplePage_usersList__VSso0\",\"usersNav\":\"PeoplePage_usersNav__D4dSu\",\"usersNavItem\":\"PeoplePage_usersNavItem__L+8kB\"};","import React, { useEffect, useRef } from 'react'\nimport { NavLink, Outlet } from 'react-router-dom'\nimport MyButton from '../../components/common/MyButton/MyButton'\nimport Preloader from '../../components/common/Preloader/Preloader'\nimport { getPagesAmount, isActiveNavLink } from '../../helpers/helpers'\nimport { IUser } from '../../redux/users/types'\nimport cl from './PeoplePage.module.scss'\n\n/* ------------- Types ------------- */\ninterface PeoplePageProps {\n  usersList: IUser[]\n  totalUsersCount: number\n  currentPage: number\n  maxPageItemsCount: number\n  searchInput: string\n  pathName: string\n  isUsersFetching: boolean\n  isSubscribePending: number[]\n  navigate: (link: string) => void\n  setSearchInput: (searchInput: string) => void\n  toggleFollowOnUser: (userId: number, followed: boolean) => void\n  setCurrentPage: (page: number) => void\n  createDialogThunk: (userId: number) => void\n}\n\nexport interface PeoplePageOutletContext {\n  usersList: IUser[]\n  isSubscribePending: number[]\n  toggleFollowOnUser: (userId: number, followed: boolean) => void\n  createDialogThunk: (userId: number) => void\n}\n\n/* ------------- Component ------------- */\nconst PeoplePage: React.FC<PeoplePageProps> = ({\n  totalUsersCount,\n  currentPage,\n  maxPageItemsCount,\n  usersList,\n  searchInput,\n  navigate,\n  pathName,\n  isUsersFetching,\n  isSubscribePending,\n  toggleFollowOnUser,\n  setCurrentPage,\n  setSearchInput,\n  createDialogThunk,\n}) => {\n  const observedElement = useRef<HTMLDivElement>(null)\n  const observer = useRef<IntersectionObserver | null>(null)\n  const path = useRef(pathName)\n\n  useEffect(() => {\n    if (isUsersFetching) return\n    if (observer.current) {\n      observer.current.disconnect()\n    }\n    const callBack = (entries: IntersectionObserverEntry[]): void => {\n      if (\n        entries[0].isIntersecting &&\n        currentPage < getPagesAmount(totalUsersCount, maxPageItemsCount) &&\n        path.current === pathName\n      ) {\n        setCurrentPage(currentPage + 1)\n      }\n      path.current = pathName\n    }\n    observer.current = new IntersectionObserver(callBack)\n    observer.current.observe(observedElement.current!)\n  }, [isUsersFetching, pathName])\n\n  const handleSearchInputChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setSearchInput(e.target.value)\n\n  return (\n    <section className={cl.usersIFollowSection}>\n      <section className={cl.usersSection}>\n        <PeopleTabs totalUsersCount={totalUsersCount} navigate={navigate} />\n        <input\n          placeholder={'Search users I follow'}\n          className={cl.searchInput}\n          type=\"text\"\n          value={searchInput}\n          onChange={handleSearchInputChange}\n        />\n        <div className={cl.usersList}>\n          <Outlet //UsersList\n            context={{\n              usersList,\n              isSubscribePending,\n              toggleFollowOnUser,\n              createDialogThunk,\n            }} \n          />\n        </div>\n        {isUsersFetching ? (<Preloader width=\"50px\" height=\"50px\" position=\"absolute\" />) : (<div ref={observedElement} />)}\n      </section>\n      <PeopleNav />\n    </section>\n  )\n}\n\nexport default PeoplePage\n\n/* ------------- Nested components ------------- */\ninterface PeopleTabsProps {\n  totalUsersCount: number\n  navigate: (link: string) => void\n}\n\nconst PeopleTabs: React.FC<PeopleTabsProps> = ({ totalUsersCount, navigate }) => {\n  return (\n    <div className={cl.usersTabs}>\n      <div className={cl.tabsRow}>\n        <div className={`${cl.tabItem} ${cl.active}`}>\n          <span>All developers </span>\n          <span className={cl.totalCount}>{totalUsersCount}</span>\n        </div>\n        <div className={cl.tabItem}>Developers online</div>\n      </div>\n      <div className={cl.buttonContainer}>\n        <MyButton callBack={() => navigate('/people')}>Find developers</MyButton>\n      </div>\n    </div>\n  )\n}\n\nconst PeopleNav = () => {\n  return (\n    <nav className={cl.usersNav}>\n      <NavLink to=\"friends\" className={isActiveNavLink(cl.usersNavItem, cl.active)} >People I follow</NavLink>\n      <NavLink to=\"/people\" end className={isActiveNavLink(cl.usersNavItem, cl.active)} >Find Developers</NavLink>\n      <div className={cl.usersNavItem}>Placeholder</div>\n      <div className={cl.usersNavItem}>Placeholder</div>\n      <div className={cl.usersNavItem}>Placeholder</div>\n    </nav>\n  )\n}\n","import React, { useEffect, useRef, useState } from 'react'\nimport { RootState } from '../../redux/store'\nimport { fetchUsersThunk } from '../../redux/users/thunks'\nimport { clearUsersState } from '../../redux/users/actions';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { compose } from 'redux';\nimport { setCurrentUsersPage } from '../../redux/users/actions';\nimport { toggleFollowOnUserThunk } from '../../redux/users/thunks';\nimport PeoplePage from './PeoplePage';\nimport { RouteType, withRoute } from '../../components/hoc/withRoute';\nimport { ErrorPopUp } from '../../components/common/ErrorPopUp/ErrorPopUp';\nimport { createDialogThunk } from '../../redux/messenger/thunks';\n\n/* ------------- Component ------------- */\nconst PeoplePageContainerApi: React.FC<PeoplePageContainerProps & RouteType> = ({\n  route,\n  usersList,\n  currentPage,\n  totalUsersCount,\n  maxPageItemsCount,\n  isSubscribePending,\n  isUsersFetching,\n  fetchUsersError,\n  toggleFollowOnUserError,\n  clearUsersState,\n  setCurrentUsersPage,\n  fetchUsersThunk,\n  toggleFollowOnUserThunk,\n  createDialogThunk\n}) => {\n  const {location: {pathname: pathName}, navigate} = route\n  const [searchInput, setSearchInput] = useState('')\n  const memorizedPath = useRef(pathName)\n\n  useEffect(() => {\n    return () => {\n      clearUsersState()\n    }\n  }, [clearUsersState])\n\n  useEffect(() => {\n    clearUsersState()\n    window.scrollTo(0, 0)\n  }, [searchInput])\n\n  useEffect(() => {\n    clearUsersState()\n  }, [pathName])\n\n  useEffect(() => {\n    if(memorizedPath.current !== pathName && currentPage > 1) {\n      memorizedPath.current = pathName\n      return \n    }\n\n    if(isUsersFetching) return\n\n    memorizedPath.current = pathName\n\n    switch (pathName) {\n      case '/people':\n        fetchUsersThunk(currentPage, searchInput)\n        return\n      case '/people/friends':\n        fetchUsersThunk(currentPage, searchInput, true)\n        return\n    }\n  }, [currentPage, searchInput, pathName, fetchUsersThunk])\n\n  return (\n    <>\n      <ErrorPopUp titlesArray={[toggleFollowOnUserError, fetchUsersError]}/>\n      <PeoplePage\n        pathName={pathName}\n        searchInput={searchInput}\n        currentPage={currentPage}\n        maxPageItemsCount={maxPageItemsCount}\n        isUsersFetching={isUsersFetching}\n        totalUsersCount={totalUsersCount}\n        usersList={usersList}\n        isSubscribePending={isSubscribePending}\n        navigate={navigate}\n        setSearchInput={setSearchInput}\n        toggleFollowOnUser={toggleFollowOnUserThunk}\n        createDialogThunk={createDialogThunk}\n        setCurrentPage={setCurrentUsersPage}\n      />\n    </>\n  )\n}\n\n/* ------------- Container ------------- */\nconst mapStateToProps = (state: RootState) => {\n  return {\n    usersList: state.users.users,\n    currentPage: state.users.currentUsersPage,\n    maxPageItemsCount: state.users.maxPageItemsCount,\n    totalUsersCount: state.users.totalUsersCount,\n    isUsersFetching: state.users.requests.fetchUsersPending,\n    isSubscribePending: state.users.requests.toggleFollowOnUserPending,\n    toggleFollowOnUserError: state.users.requests.toggleFollowOnUserError,\n    fetchUsersError: state.users.requests.fetchUsersError, \n  }\n} \n\nconst mapDispatchToProps = {\n  clearUsersState,\n  setCurrentUsersPage,\n  fetchUsersThunk,\n  toggleFollowOnUserThunk,\n  createDialogThunk,\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps)\nexport type PeoplePageContainerProps = ConnectedProps<typeof connector>\n\nexport default compose<any>(connector, withRoute)(PeoplePageContainerApi)"],"names":["totalUsersCount","currentPage","maxPageItemsCount","usersList","searchInput","navigate","pathName","isUsersFetching","isSubscribePending","toggleFollowOnUser","setCurrentPage","setSearchInput","createDialogThunk","observedElement","useRef","observer","path","useEffect","current","disconnect","IntersectionObserver","entries","isIntersecting","getPagesAmount","observe","className","cl","PeopleTabs","placeholder","type","value","onChange","e","target","context","Preloader","width","height","position","ref","PeopleNav","MyButton","callBack","to","isActiveNavLink","end","mapDispatchToProps","clearUsersState","setCurrentUsersPage","fetchUsersThunk","toggleFollowOnUserThunk","connector","connect","state","users","currentUsersPage","requests","fetchUsersPending","toggleFollowOnUserPending","toggleFollowOnUserError","fetchUsersError","compose","withRoute","route","location","pathname","useState","memorizedPath","window","scrollTo","ErrorPopUp","titlesArray"],"sourceRoot":""}