{"version":3,"file":"static/js/405.9d3e34b7.chunk.js","mappings":"yMACA,G,QAAA,CAAgB,UAAY,yBAAyB,UAAY,yBAAyB,MAAQ,uB,uCCDrFA,EAAW,SAACC,GAAD,OACtBA,OAAQC,EAAY,qCAETC,EAAkB,SAACC,GAAD,OAAiB,SAACH,GAAD,OAC9CA,EAAMI,QAAUD,OACZF,EACA,kD,6BC2DAI,EAAiB,CACrBC,gCAAAA,EAAAA,IAKIC,GAFYC,EAAAA,EAAAA,KAVM,SAACC,GAAsB,IAAD,EAC5C,MAAO,CACLC,OAAQD,EAAME,KAAKC,KAAX,UAAiBH,EAAME,KAAKC,YAA5B,aAAiB,EAAiBC,KAAKC,MAAQ,QAQhBT,EAEpBU,EAxDsB,SAAC,GAGvC,IAFLT,EAEI,EAFJA,gCACAI,EACI,EADJA,OAEMM,EAAa,mCAAG,WACpBC,EACAC,EACAC,GAHoB,iFAIIb,EAAgCW,EAAQE,GAJ5C,mFAAH,0DAMnB,OACE,iBAAKC,UAAWC,EAAAA,UAAhB,UACGX,IAAU,SAAC,KAAD,CAAUY,GAAG,cACxB,SAAC,KAAD,CACEC,SAAUP,EACVQ,OAAQ,gBAAEC,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,YAAhB,OACN,kBAAMN,UAAWC,EAAAA,KAASE,SAAUE,EAApC,WACE,iBAAKL,UAAWC,EAAAA,UAAhB,WACE,SAACM,EAAA,EAAD,CACEC,KAAM,QACNC,KAAM,OACNC,YAAa,QACbC,WAAY,CAAChC,EAAUG,EAAgB,KACvC8B,QAAS,WAEX,SAACL,EAAA,EAAD,CACEC,KAAM,WACNC,KAAM,WACNC,YAAa,WACbC,WAAY,CAAChC,EAAUG,EAAgB,KACvC8B,QAAS,WAEb,gBAAKZ,UAAWC,EAAAA,MAAhB,SAA2BK,QAE3B,gBAAKN,UAAWC,EAAAA,OAAhB,UACE,SAACY,EAAA,EAAD,CAAUd,SAAU,aAApB,mCAuBd","sources":["webpack://react-samurai-way/./src/screens/Login/Login.module.scss?bc1c","helpers/validation.ts","screens/Login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Login_container__GKmFc\",\"fieldsCol\":\"Login_fieldsCol__Ad0lK\",\"error\":\"Login_error__Z25Bu\"};","export const required = (value: string) =>\n  value ? undefined : 'This is required field to fill in'\n\nexport const stringMaxLength = (max: number) => (value: string) =>\n  value.length <= max\n    ? undefined\n    : 'You have exceeded the maximum character limit'\n\nexport const stringMinLength = (min: number) => (value: string) =>\n  value.length <= min ? undefined : `The minimal length of this field is ${min}`\n","import React from 'react'\nimport cl from './Login.module.scss'\nimport { Form } from 'react-final-form'\nimport { RootState } from '../../redux/store'\nimport { connect, ConnectedProps } from 'react-redux'\nimport { Navigate } from 'react-router-dom'\nimport { FieldWithValidation } from '../../components/common/FieldWithValidation/FieldWithValidation'\nimport { required, stringMaxLength } from '../../helpers/validation'\nimport MyButton from '../../components/common/MyButton/MyButton'\nimport { FormApi } from 'final-form'\nimport { createAuthenticatedSessionThunk } from '../../redux/auth/thunks'\n\nexport type LoginFormValuesType = { email: string; password: string }\nexport type LoginFormCallBackType = ((errors: Object | undefined) => void) | undefined\n\nconst Login: React.FC<LoginContainerProps> = ({\n  createAuthenticatedSessionThunk,\n  isAuth,\n}) => {\n  const submitHandler = async (\n    values: LoginFormValuesType,\n    form: FormApi<LoginFormValuesType>,\n    callBack: LoginFormCallBackType\n  ): Promise<void> => await createAuthenticatedSessionThunk(values, callBack!)\n\n  return (\n    <div className={cl.container}>\n      {isAuth && <Navigate to=\"/profile\"/>}\n      <Form\n        onSubmit={submitHandler}\n        render={({handleSubmit, submitError}) => (\n          <form className={cl.form} onSubmit={handleSubmit}>\n            <div className={cl.fieldsCol}>\n              <FieldWithValidation\n                name={'email'}\n                type={'text'}\n                placeholder={'login'}\n                validators={[required, stringMaxLength(38)]}\n                Element={'input'}\n              />\n              <FieldWithValidation\n                name={'password'}\n                type={'password'}\n                placeholder={'Password'}\n                validators={[required, stringMaxLength(38)]}\n                Element={'input'}\n                />\n            <div className={cl.error}>{submitError}</div>\n            </div>\n            <div className={cl.button}>\n              <MyButton callBack={() => {}}>Sign in</MyButton>\n            </div>\n          </form>\n        )}\n      />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    isAuth: state.auth.user? state.auth.user?.data.login : null,\n  }\n}\n\nconst actionCreators = {\n  createAuthenticatedSessionThunk,\n}\n\nconst connector = connect(mapStateToProps, actionCreators)\nexport type LoginContainerProps = ConnectedProps<typeof connector>\nconst LoginContainer = connector(Login)\n\nexport default LoginContainer\n"],"names":["required","value","undefined","stringMaxLength","max","length","actionCreators","createAuthenticatedSessionThunk","LoginContainer","connect","state","isAuth","auth","user","data","login","connector","submitHandler","values","form","callBack","className","cl","to","onSubmit","render","handleSubmit","submitError","FieldWithValidation","name","type","placeholder","validators","Element","MyButton"],"sourceRoot":""}