{"version":3,"file":"static/js/606.fcb48ebe.chunk.js","mappings":"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","sources":["components/hoc/withAuthRedirect.tsx","api/messenger.ts","redux/messenger/actions.ts","webpack://react-samurai-way/./src/screens/Messenger/Messenger.module.scss?adc8","webpack://react-samurai-way/./src/screens/Messenger/DialogItem/DialogItem.module.scss?bcd3","screens/Messenger/DialogItem/DialogItem.tsx","webpack://react-samurai-way/./src/screens/Messenger/Message/Message.module.scss?5ce9","screens/Messenger/Message/Message.tsx","screens/Messenger/Messenger.tsx","screens/Messenger/MessengerContainer.tsx","redux/messenger/thunks.ts"],"sourcesContent":["import { connect, ConnectedProps } from 'react-redux'\nimport { Navigate } from 'react-router-dom'\nimport { RootState } from '../../redux/store'\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    isAuth: state.auth.user?.data.login\n  }\n}\n\nexport const withAuthenticatedRedirect = (Component: any) => {\n  const withAuthenticatedRedirectComponent = (props: PropsFromRedux) =>  {\n    if(!props.isAuth) {\n      return <Navigate to='/login'/>\n    }\n    return <Component {...props} />\n  }\n\n  const connector = connect(mapStateToProps)\n  type PropsFromRedux = ConnectedProps<typeof connector>\n  const ConnectedAuthenticatedRedirectComponent = connector(withAuthenticatedRedirectComponent)\n\n  return ConnectedAuthenticatedRedirectComponent\n}\n\n\n\n","import { DialogType, MessageType } from '../redux/messenger/types'\nimport api from './api'\n\nexport type FetchDialogsApiType = DialogType[]\nexport interface FetchDialogsApiResponse extends FetchDialogsApiType {}\n\nexport interface FetchMessagesApiResponse {\n  items: MessageType[],\n  error: string\n}\n\nexport const fetchDialogsApi = () => api.get<FetchDialogsApiResponse>('dialogs')\n\nexport const fetchMessagesApi = (userId: number) => api.get<FetchMessagesApiResponse>(`dialogs/${userId}/messages?page=1&count=20`)","import { DialogsConstants, DialogType, MessageType } from \"./types\"\n\nexport interface FetchDialogsRequest extends ReturnType<typeof fetchDialogsRequest> {}\nexport interface FetchDialogsSuccess extends ReturnType<typeof fetchDialogsSuccess> {}\nexport interface FetchDialogsFailure extends ReturnType<typeof fetchDialogsFailure> {}\nexport interface FetchMessagesRequest extends ReturnType<typeof fetchMessagesRequest> {}\nexport interface FetchMessagesSuccess extends ReturnType<typeof fetchMessagesSuccess> {}\nexport interface FetchMessagesFailure extends ReturnType<typeof fetchMessagesFailure> {}\n\nexport type DialogsAction =\n  | FetchDialogsRequest\n  | FetchDialogsSuccess\n  | FetchDialogsFailure\n  | FetchMessagesRequest\n  | FetchMessagesSuccess\n  | FetchMessagesFailure\n\nexport const fetchDialogsRequest = () => {\n  return <const>{ type: DialogsConstants.FETCH_DIALOGS_REQUEST }\n}\n\nexport const fetchDialogsSuccess = (dialogs: DialogType[]) => {\n  return <const>{ type: DialogsConstants.FETCH_DIALOGS_SUCCESS, payload: dialogs }\n}\n\nexport const fetchDialogsFailure = (error: string) => {\n  return <const>{ type: DialogsConstants.FETCH_DIALOGS_FAILURE, payload: error }\n}\n\nexport const fetchMessagesRequest = () => {\n  return <const>{ type: DialogsConstants.FETCH_MESSAGES_REQUEST }\n}\n\nexport const fetchMessagesSuccess = (messages: MessageType[]) => {\n  return <const>{ type: DialogsConstants.FETCH_MESSAGES_SUCCESS, payload: messages }\n}\n\nexport const fetchMessagesFailure = (error: string) => {\n  return <const>{ type: DialogsConstants.FETCH_MESSAGES_FAILURE, payload: error }\n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogsPage\":\"Messenger_dialogsPage__6PmBP\",\"dialogs\":\"Messenger_dialogs__PgkNj\",\"dialogBlock\":\"Messenger_dialogBlock__aC8ZY\",\"dialogsWrapper\":\"Messenger_dialogsWrapper__Bq1fm\",\"conversationWrapper\":\"Messenger_conversationWrapper__ejOeC\",\"conversation\":\"Messenger_conversation__S7Jt8\",\"newMessage\":\"Messenger_newMessage__EqAdP\"};","// extracted by mini-css-extract-plugin\nexport default {\"userLink\":\"DialogItem_userLink__RrjAu\",\"active\":\"DialogItem_active__r20a8\",\"time\":\"DialogItem_time__pM+no\",\"message\":\"DialogItem_message__89jYo\",\"messageCounter\":\"DialogItem_messageCounter__JlTmx\",\"avatar\":\"DialogItem_avatar__n4ZKM\",\"name\":\"DialogItem_name__niEUB\"};","import cl from './DialogItem.module.scss'\nimport { NavLink } from 'react-router-dom'\nimport Avatar from '../../../components/Avatar/Avatar'\nimport {\n  convertDateFormat,\n  getRightDateFormat,\n  isActiveNavLink,\n  reduceLine,\n} from '../../../helpers/helpers'\n\ninterface DialogItemProps {\n  id: number\n  userName: string\n  lastDialogActivity: string\n  newMessagesCounter: number\n  photo: string | null\n  setInterlocutorPhoto: React.Dispatch<React.SetStateAction<null | string>>\n}\n\nexport const DialogItem: React.FC<DialogItemProps> = ({\n  id,\n  lastDialogActivity,\n  newMessagesCounter,\n  photo,\n  userName,\n  setInterlocutorPhoto,\n}) => {\n  return (\n    <li>\n      <NavLink onClick={() => setInterlocutorPhoto(photo)} className={isActiveNavLink(cl.userLink, cl.active)} to={`${id}`}>\n        <div className={cl.avatar}>\n          <Avatar photo={photo} />\n        </div>\n        <div className={cl.name}>{reduceLine(userName)}</div>\n        <p className={cl.message}>{reduceLine('lorem lorem lorem lorem')}</p>\n        <time className={cl.time}>{convertDateFormat(lastDialogActivity)}</time>\n        {/* <time className={cl.time}>{getRightDateFormat(lastDialogActivity)}</time> */}\n        {newMessagesCounter > 0 && <div className={cl.messageCounter}>{newMessagesCounter}</div>}\n      </NavLink>\n    </li>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"messageColumn\":\"Message_messageColumn__aYgIq\",\"avatar\":\"Message_avatar__R8hf4\",\"name\":\"Message_name__D2cr5\",\"time\":\"Message_time__0WK0X\",\"message\":\"Message_message__bFOLq\"};","import cl from \"./Message.module.scss\";\nimport Avatar from \"../../../components/Avatar/Avatar\";\n\ninterface MessageProps {\n  message: string\n  photo: string | null | undefined\n  name: string\n  time: string\n}\n\nexport const Message: React.FC<MessageProps> = ({\n  message,\n  name,\n  photo,\n  time\n}) => {\n  return (\n    <li className={cl.messageColumn}>\n      <div className={cl.avatar}>\n        <Avatar photo={photo} />\n      </div>\n      <div>\n        <span className={cl.name}>{name}</span>\n        <time className={cl.time} >{time}</time>\n      </div>\n      <p className={cl.message}>{message}</p>\n    </li>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react'\nimport cl from './Messenger.module.scss'\nimport { DialogItem } from './DialogItem/DialogItem'\nimport { Field, Form } from 'react-final-form'\nimport { DialogType, MessageType } from '../../redux/messenger/types'\nimport { Message } from './Message/Message'\nimport { convertDateFormat } from '../../helpers/helpers'\nimport { AuthenticatedUser } from '../../redux/auth/types'\n\ninterface MessengerProps {\n  dialogs: DialogType[],\n  messages: MessageType[],\n  authProfileId: number | undefined,\n  authProfilePhoto: string | undefined | null,\n}\n\nconst Messenger: React.FC<MessengerProps> = ({\n  dialogs,\n  messages,\n  authProfileId,\n  authProfilePhoto\n}) => {\n  const [interlocutorPhoto, setInterlocutorPhoto] = useState<null | string>(null)\n\n  const conversationWrapper = useRef<HTMLDivElement>(null)\n  useEffect(() => {\n    conversationWrapper.current?.scrollTo(0, 99999)\n  }, [messages])\n\n  const messagesList = messages.map((message) => {\n    const photo = message.senderId === authProfileId ? authProfilePhoto : interlocutorPhoto\n\n    return (\n      <Message\n        photo={photo}\n        name={message.senderName}\n        key={message.id}\n        message={message.body}\n        time={convertDateFormat(message.addedAt)}\n      />\n    )\n  })\n\n  const dialogsList = dialogs.map((dialog) => (\n      <DialogItem\n        setInterlocutorPhoto={setInterlocutorPhoto}\n        key={dialog.id}\n        id={dialog.id}\n        userName={dialog.userName}\n        lastDialogActivity={dialog.lastDialogActivityDate}\n        newMessagesCounter={dialog.newMessagesCount}\n        photo={dialog.photos.small}\n        // lastMessage={dialog.lastMessage}\n      />\n    )\n  )\n\n  return (\n    <div className={cl.dialogsPage}>\n      <div className={cl.dialogsWrapper}>\n        <ul className={cl.dialogs}>{dialogsList}</ul>\n      </div>\n      <div className={cl.dialogBlock}>\n        <div ref={conversationWrapper} className={cl.conversationWrapper}>\n          <ul className={cl.conversation}>{messagesList}</ul>\n        </div>\n        {/* <ReduxForm setMessages={props.setMessages} /> */}\n      </div>\n    </div>\n  )\n}\n\nconst ReduxForm = (props: {setMessages: (message: string) => {}}) => {\n  const submitHandler = (values: {newMessage: string}) => {\n    props.setMessages(values.newMessage)\n    values.newMessage = ''\n  }\n\n  const onPressHandler = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      document.getElementById('form')!.dispatchEvent(new Event('submit', { cancelable: true, bubbles: true }))\n      e.preventDefault()\n    }\n  }\n\n  return (\n    <Form\n      onSubmit={submitHandler}\n      render={(props) => {\n        return (\n          <form id=\"form\" onSubmit={props.handleSubmit}>\n            <Field\n              name=\"newMessage\"\n              placeholder=\"Write a message (reduxForm)\"\n              className={cl.newMessage}\n              component=\"textarea\"\n              onKeyPress={onPressHandler}\n            />\n          </form>\n        )\n      }}\n    />\n  )\n}\n\nexport default Messenger\n","import { useEffect } from \"react\";\nimport { compose } from \"redux\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { RootState } from \"../../redux/store\";\nimport { withAuthenticatedRedirect } from \"../../components/hoc/withAuthRedirect\";\nimport { RouteType, withRoute } from \"../../components/hoc/withRoute\";\nimport { fetchDialogsThunk, fetchMessagesThunk } from '../../redux/messenger/thunks'\nimport Messenger from \"./Messenger\";\n\nconst MessengerContainerApi: React.FC<MessengerContainerProps> = ({\n  dialogs,\n  messages,\n  fetchDialogsThunk,\n  fetchMessagesThunk,\n  route,\n  authProfileId,\n  authProfilePhoto\n}) => {\n  const userId = parseInt(route.params.userId)\n\n  useEffect(() => {\n    fetchDialogsThunk()\n  }, [fetchDialogsThunk])\n\n  useEffect(() => {\n    fetchMessagesThunk(userId)\n  }, [userId])\n\n  return <Messenger authProfilePhoto={authProfilePhoto} authProfileId={authProfileId} messages={messages} dialogs={dialogs} />\n}\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    dialogs: state.messenger.dialogs,\n    messages: state.messenger.messages,\n    authProfileId: state.auth.user?.data.id,\n    authProfilePhoto: state.auth.user?.data.photos?.small\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchDialogsThunk,\n  fetchMessagesThunk,\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps)\nexport type MessengerContainer = ConnectedProps<typeof connector>\ninterface MessengerContainerProps extends MessengerContainer, RouteType {}\n\nexport default compose<any>(\n  connector,\n  withAuthenticatedRedirect,\n  withRoute\n)(MessengerContainerApi)","import { fetchDialogsApi, fetchMessagesApi } from \"../../api/messenger\";\nimport { AppDispatch } from \"../store\";\nimport { fetchDialogsFailure, fetchDialogsRequest, fetchDialogsSuccess, fetchMessagesFailure, fetchMessagesRequest, fetchMessagesSuccess } from \"./actions\";\n\nexport const fetchDialogsThunk = () => {\n  return async (dispatch: AppDispatch) => {\n    try {\n      dispatch(fetchDialogsRequest())\n      const {data: dialogsData} = await fetchDialogsApi()\n      dispatch(fetchDialogsSuccess(dialogsData))\n    }catch(e) {\n      console.log(e)\n      dispatch(fetchDialogsFailure('An error occurred during fetching dialogs'))\n    }\n  }\n}\n\nexport const fetchMessagesThunk = (userId: number) => {\n  return async (dispatch: AppDispatch) => {\n    try {\n      dispatch(fetchMessagesRequest())\n      const {data: response} = await fetchMessagesApi(userId)\n      if(!response.error) {\n        dispatch(fetchMessagesSuccess(response.items))\n      }else {\n        dispatch(fetchMessagesFailure(response.error))\n      }\n    }catch(e) {\n      console.log(e)\n      dispatch(fetchMessagesFailure('An error occurred during fetching messages'))\n    }\n  }\n}"],"names":["mapStateToProps","state","isAuth","auth","user","data","login","fetchMessagesApi","userId","api","fetchMessagesFailure","error","type","DialogsConstants","payload","DialogItem","id","lastDialogActivity","newMessagesCounter","photo","userName","setInterlocutorPhoto","onClick","className","isActiveNavLink","cl","to","Avatar","reduceLine","convertDateFormat","Message","message","name","time","dialogs","messages","authProfileId","authProfilePhoto","useState","interlocutorPhoto","conversationWrapper","useRef","useEffect","current","scrollTo","messagesList","map","senderId","senderName","body","addedAt","dialogsList","dialog","lastDialogActivityDate","newMessagesCount","photos","small","ref","mapDispatchToProps","fetchDialogsThunk","dispatch","dialogsData","console","log","fetchMessagesThunk","response","items","connector","connect","messenger","compose","Component","props","withRoute","route","parseInt","params"],"sourceRoot":""}