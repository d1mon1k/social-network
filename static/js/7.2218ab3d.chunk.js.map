{"version":3,"sources":["pages/LoginPage/LoginPage.module.scss","helpers/validators.ts","pages/LoginPage/LoginPage.tsx"],"names":["module","exports","required","value","undefined","stringMaxLength","max","length","actionCreators","createAuthenticatedSessionThunk","connector","connect","state","isAuth","auth","user","login","compose","handleSubmit","values","form","callBack","className","cl","container","to","onSubmit","render","submitError","fieldsCol","FieldWithValidation","name","type","placeholder","validators","Element","input","error","button","MyButton"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,UAAY,6BAA6B,UAAY,6BAA6B,MAAQ,yBAAyB,MAAQ,yBAAyB,OAAS,4B,gHCDlKC,EAAW,SAACC,GAAD,OACtBA,OAAQC,EAAY,qCAETC,EAAkB,SAACC,GAAD,OAAiB,SAACH,GAAD,OAC9CA,EAAMI,QAAUD,OACZF,EACA,kD,iCCoEAI,EAAiB,CACrBC,qCAGIC,EAAYC,aAVM,SAACC,GAAsB,IAAD,EAC5C,MAAO,CACLC,OAAM,UAAED,EAAME,KAAKC,YAAb,aAAE,EAAiBC,SAQcR,GAG5BS,4BAAQP,EAARO,EAzD8B,SAAC,GAGvC,IAFLR,EAEI,EAFJA,gCACAI,EACI,EADJA,OAEMK,EAA8B,iDAAG,WAAQC,EAAQC,EAAMC,GAAtB,2FAC/BZ,EAAgCU,EAAQE,GADT,mFAAH,0DAGpC,OACE,sBAAKC,UAAWC,IAAGC,UAAnB,UACGX,GAAU,cAAC,IAAD,CAAUY,GAAG,aACxB,cAAC,IAAD,CACEC,SAAUR,EACVS,OAAQ,gBAAET,EAAF,EAAEA,aAAcU,EAAhB,EAAgBA,YAAhB,OACN,uBAAMN,UAAWC,IAAGH,KAAMM,SAAUR,EAApC,UACE,sBAAKI,UAAWC,IAAGM,UAAnB,UACE,cAACC,EAAA,EAAD,CACEC,KAAM,QACNC,KAAM,OACNC,YAAa,QACbC,WAAY,CAAChC,EAAUG,EAAgB,KACvC8B,QAAS,QACTb,UAAWC,IAAGa,QAEhB,cAACN,EAAA,EAAD,CACEC,KAAM,WACNC,KAAM,WACNC,YAAa,WACbC,WAAY,CAAChC,EAAUG,EAAgB,KACvC8B,QAAS,QACTb,UAAWC,IAAGa,QAEhB,qBAAKd,UAAWC,IAAGc,MAAnB,SAA2BT,OAE7B,qBAAKN,UAAWC,IAAGe,OAAnB,SACE,cAACC,EAAA,EAAD,CAAUlB,SAAU,aAApB","file":"static/js/7.2218ab3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LoginPage_container__28w_X\",\"fieldsCol\":\"LoginPage_fieldsCol__1jDuY\",\"input\":\"LoginPage_input__2glCn\",\"error\":\"LoginPage_error__1XAmB\",\"button\":\"LoginPage_button__3x_vQ\"};","export const required = (value: string) =>\n  value ? undefined : 'This is required field to fill in'\n\nexport const stringMaxLength = (max: number) => (value: string) =>\n  value.length <= max\n    ? undefined\n    : 'You have exceeded the maximum character limit'\n\nexport const stringMinLength = (min: number) => (value: string) =>\n  value.length <= min ? undefined : `The minimal length of this field is ${min}`\n","import { FormApi } from 'final-form'\nimport React from 'react'\nimport { Form } from 'react-final-form'\nimport { connect, ConnectedProps } from 'react-redux'\nimport { Navigate } from 'react-router-dom'\nimport { compose } from 'redux'\nimport { FieldWithValidation } from '../../components/common/FieldWithValidation/FieldWithValidation'\nimport MyButton from '../../components/common/MyButton/MyButton'\nimport { required, stringMaxLength } from '../../helpers/validators'\nimport { createAuthenticatedSessionThunk } from '../../redux/auth/thunks'\nimport { RootState } from '../../redux/store'\nimport cl from './LoginPage.module.scss'\n\n/* ------------- Types ------------- */\nexport type LoginFormValuesType = { email: string; password: string }\nexport type LoginFormCallBackType = ((errors: Object | undefined) => void) | undefined\n\ntype HandleSubmitType = (\n  values: LoginFormValuesType,\n  form: FormApi<LoginFormValuesType>,\n  callBack: LoginFormCallBackType\n) => Promise<void>\n\n/* ------------- Component ------------- */\nconst Login: React.FC<LoginContainerProps> = ({\n  createAuthenticatedSessionThunk,\n  isAuth,\n}) => {\n  const handleSubmit: HandleSubmitType = async ( values, form, callBack ) => \n    await createAuthenticatedSessionThunk(values, callBack!)\n\n  return (\n    <div className={cl.container}>\n      {isAuth && <Navigate to=\"/profile\"/>}\n      <Form\n        onSubmit={handleSubmit}\n        render={({handleSubmit, submitError}) => (\n          <form className={cl.form} onSubmit={handleSubmit}>\n            <div className={cl.fieldsCol}>\n              <FieldWithValidation\n                name={'email'}\n                type={'text'}\n                placeholder={'login'}\n                validators={[required, stringMaxLength(38)]}\n                Element={'input'}\n                className={cl.input}\n              />\n              <FieldWithValidation\n                name={'password'}\n                type={'password'}\n                placeholder={'Password'}\n                validators={[required, stringMaxLength(38)]}\n                Element={'input'}\n                className={cl.input}\n                />\n              <div className={cl.error}>{submitError}</div>\n            </div>\n            <div className={cl.button}>\n              <MyButton callBack={() => {}}>Sign in</MyButton>\n            </div>\n          </form>\n        )}\n      />\n    </div>\n  )\n}\n\n/* ------------- Container ------------- */\nconst mapStateToProps = (state: RootState) => {\n  return {\n    isAuth: state.auth.user?.login,\n  }\n}\n\nconst actionCreators = {\n  createAuthenticatedSessionThunk,\n}\n\nconst connector = connect(mapStateToProps, actionCreators)\ntype LoginContainerProps = ConnectedProps<typeof connector>\n\nexport default compose(connector)(Login)\n"],"sourceRoot":""}