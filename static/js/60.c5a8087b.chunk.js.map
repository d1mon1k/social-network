{"version":3,"file":"static/js/60.c5a8087b.chunk.js","mappings":"kLACA,EAAgC,+BAAhC,EAAwE,wBAAxE,EAAuG,sBAAvG,EAAoI,sBAApI,EAAoK,yB,SCavJA,EAAkC,SAAC,GAMzC,IALLC,EAKI,EALJA,QACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,KACAC,EACI,EADJA,OAMA,OACE,gBAAIC,UAAWC,EAAf,WACE,gBAAKD,UAAWC,EAAhB,UAA2B,SAACC,EAAA,EAAD,CAAQH,OAAQA,EAAQF,MAAOA,OAC1D,4BACE,4BACE,SAAC,KAAD,CAAMM,GAAE,mBAAcJ,GAAUC,UAAWC,EAA3C,SAAqDL,KACrD,iBAAMI,UAAWC,EAAjB,SAA4BH,OAVf,SAACH,GAAD,OACnBA,EAAQS,MAAM,UAAUC,KAAI,SAACC,EAAMC,GAAP,OAAiB,cAAeP,UAAWC,EAA1B,SAAuCK,GAA/BC,MAWhDC,CAAab,W,kIChCtB,EAA2B,+BAA3B,EAA+E,yC,SCoE/E,EAhDqB,WACnB,OASIc,EAAAA,EAAAA,MARFC,EADF,EACEA,QACAC,EAFF,EAEEA,SACAC,EAHF,EAGEA,eACAC,EAJF,EAIEA,cACAC,EALF,EAKEA,iBACAC,EANF,EAMEA,mBACAC,EAPF,EAOEA,SACAC,EARF,EAQEA,sBAGFC,EAAAA,EAAAA,YAAU,WACR,OAAO,WACLH,OAED,CAACC,IAEJ,IAAMG,GAAgB,OAAIT,GAASU,QAAO,SAACC,GAAD,OAAYA,EAAOC,KAAOV,KAAgB,GAE9EW,EAAYZ,EAASN,KAAI,SAACV,GAC9B,IAAME,EAAQF,EAAQ6B,WAAaX,EAAeC,EAApC,OAAsDK,QAAtD,IAAsDA,OAAtD,EAAsDA,EAAeM,OAAOC,MACpFJ,EAAK3B,EAAQ6B,WAAaX,EAAgBA,EAAgBD,EAChE,OACE,SAAClB,EAAA,EAAD,CACEK,OAAQuB,EACRzB,MAAOA,EACPD,KAAMD,EAAQgC,WAEdhC,QAASA,EAAQiC,KACjB9B,MAAM+B,EAAAA,EAAAA,IAAkBlC,EAAQmC,SAAS,IAFpCnC,EAAQ2B,OAOnB,OACE,eAAItB,UAAWC,EAAf,SACGgB,GACC,gBAAKjB,UAAWC,EAAhB,UACE,SAAC8B,EAAA,EAAD,CAAWC,OAAO,OAAOC,MAAM,OAAOC,SAAS,eAGjDX","sources":["webpack://react-samurai-way/./src/components/MessagesBlock/MessagesList/Message/Message.module.scss?5e3d","components/MessagesBlock/MessagesList/Message/Message.tsx","webpack://react-samurai-way/./src/components/MessagesBlock/MessagesList/MessagesList.module.scss?16d3","components/MessagesBlock/MessagesList/MessagesList.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"messageColumn\":\"Message_messageColumn__dg7kE\",\"avatar\":\"Message_avatar__2XoxZ\",\"name\":\"Message_name__lCP6t\",\"time\":\"Message_time__JMhLm\",\"message\":\"Message_message__2hjMw\"};","import { Link } from \"react-router-dom\";\nimport Avatar from \"../../../Avatar/Avatar\";\nimport cl from \"./Message.module.scss\";\n\n/* ------------- Types ------------- */\ninterface MessageProps {\n  message: string\n  photo: string | null | undefined\n  name: string\n  time: string\n  userId: number\n}\n\n/* ------------- Component ------------- */\nexport const Message: React.FC<MessageProps> = ({\n  message,\n  name,\n  photo,\n  time,\n  userId\n}) => {\n  const messageParse = (message: string) => (\n    message.split('<br />').map((item, index) => <p key={index} className={cl.message}>{item}</p>)\n  )\n\n  return (\n    <li className={cl.messageColumn}>\n      <div className={cl.avatar}><Avatar userId={userId} photo={photo} /></div>\n      <div>\n        <div>\n          <Link to={`/profile/${userId}`} className={cl.name}>{name}</Link>\n          <time className={cl.time} >{time}</time>\n        </div>\n        {messageParse(message)}\n      </div>\n    </li>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"MessagesList_messages__yixkg\",\"preloaderContainer\":\"MessagesList_preloaderContainer__2UCA-\"};","import { useEffect } from \"react\"\nimport { useOutletContext } from \"react-router-dom\"\nimport { convertDateFormat } from \"../../../helpers/helpers\"\nimport { DialogType, MessageType } from \"../../../redux/messenger/types\"\nimport Preloader from \"../../common/Preloader/Preloader\"\nimport { Message } from \"./Message/Message\"\nimport cl from './MessagesList.module.scss'\n\n/* ------------- Types ------------- */\ninterface OutletContext {\n  dialogs: DialogType[]\n  messages: MessageType[]\n  interlocutorId: number\n  authProfileId: number\n  authProfilePhoto: string\n  pathName: string\n  fetchMessagesPending: boolean\n  clearMessagesState: () => void\n}\n\n/* ------------- Component ------------- */\nconst MessagesList = () => {\n  const {\n    dialogs,\n    messages,\n    interlocutorId,\n    authProfileId,\n    authProfilePhoto,\n    clearMessagesState,\n    pathName,\n    fetchMessagesPending\n  } = useOutletContext<OutletContext>() //MessagesBlock\n\n  useEffect(() => {\n    return () => {\n      clearMessagesState()\n    }\n  }, [pathName])\n\n  const currentDialog = [...dialogs].filter((dialog) => dialog.id === interlocutorId)[0]\n\n  const _messages = messages.map((message) => {\n    const photo = message.senderId === authProfileId? authProfilePhoto: currentDialog?.photos.small\n    const id = message.senderId === authProfileId ? authProfileId : interlocutorId\n    return (\n      <Message\n        userId={id}\n        photo={photo}\n        name={message.senderName}\n        key={message.id}\n        message={message.body}\n        time={convertDateFormat(message.addedAt, true)}\n      />\n    )\n  })\n\n  return (\n    <ul className={cl.messages}>\n      {fetchMessagesPending ? (\n        <div className={cl.preloaderContainer}>\n          <Preloader height=\"55px\" width=\"55px\" position=\"absolute\" />\n        </div>\n      ) : (\n        _messages\n      )}\n    </ul>\n  )\n}\n\nexport default MessagesList\n\n"],"names":["Message","message","name","photo","time","userId","className","cl","Avatar","to","split","map","item","index","messageParse","useOutletContext","dialogs","messages","interlocutorId","authProfileId","authProfilePhoto","clearMessagesState","pathName","fetchMessagesPending","useEffect","currentDialog","filter","dialog","id","_messages","senderId","photos","small","senderName","body","convertDateFormat","addedAt","Preloader","height","width","position"],"sourceRoot":""}