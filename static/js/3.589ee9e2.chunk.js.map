{"version":3,"sources":["components/DialogsBlock/DialogItem/DialogItem.module.scss","components/DialogsBlock/DialogsBlock.module.scss","components/MessagesBlock/MessagesBlock.module.scss","pages/MessengerPage/MessengerPage.module.scss","components/DialogsBlock/DialogItem/DialogItem.tsx","components/DialogsBlock/DialogsBlock.tsx","components/MessagesBlock/MessagesBlock.tsx","pages/MessengerPage/MessengerPage.tsx","pages/MessengerPage/MessengerPageContainer.tsx"],"names":["module","exports","DialogItem","dialogItem","name","reduceLine","userName","path","id","className","isActiveNavLink","cl","userLink","active","to","avatar","Avatar","photo","photos","small","message","time","convertDateFormat","lastDialogActivityDate","newMessagesCount","messageCounter","DialogsBlock","dialogs","dialogsWrapper","map","dialog","MessagesBlock","pathName","isDialogSelected","authProfileId","authProfilePhoto","messages","currentDialog","navigate","fetchChatMessagesStatus","fetchMessagesPending","sendMessage","useState","newMessage","setNewMessage","isWsChatSelected","useEffect","callBack","e","key","every","window","addEventListener","removeEventListener","messagesBlock","MessagesWrapper","textAreaWrapper","value","disabled","placeholder","newMessageField","onKeyDown","shiftKey","preventDefault","onChange","target","Messenger","interlocutorId","filter","messenger","mapDispatchToProps","fetchDialogsThunk","fetchMessagesThunk","sendMessageThunk","sendChatMessageThunk","connector","connect","state","dialogMessages","chatMessages","chat","auth","user","requests","createDialogError","fetchMessagesError","fetchDialogsError","sendMessageError","compose","withRoute","withAuthenticatedRedirect","route","userId","parseInt","params","location","pathname","bind","dialogsWithChat","hasNewMessages","lastUserActivityDate","large","ErrorPopUp","titlesArray","MessengerPage"],"mappings":"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","file":"static/js/3.589ee9e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userLink\":\"DialogItem_userLink__kC1n6\",\"active\":\"DialogItem_active__2lnZy\",\"time\":\"DialogItem_time__29Q1a\",\"message\":\"DialogItem_message__1uTxW\",\"messageCounter\":\"DialogItem_messageCounter__Q7lqM\",\"avatar\":\"DialogItem_avatar__39V1I\",\"avatarContainer\":\"DialogItem_avatarContainer__3prS6\",\"name\":\"DialogItem_name__2zudr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrapper\":\"DialogsBlock_dialogsWrapper__13L6J\",\"dialogs\":\"DialogsBlock_dialogs__3rX9O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messagesBlock\":\"MessagesBlock_messagesBlock__2vaW7\",\"textAreaWrapper\":\"MessagesBlock_textAreaWrapper__1LW0C\",\"newMessageField\":\"MessagesBlock_newMessageField__3NOQX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messenger\":\"MessengerPage_messenger__3apyR\"};","import { NavLink } from 'react-router-dom'\nimport {\n  convertDateFormat,\n  isActiveNavLink,\n  reduceLine,\n} from '../../../helpers/helpers'\nimport { DialogType } from '../../../redux/messenger/types'\nimport Avatar from '../../Avatar/Avatar'\nimport cl from './DialogItem.module.scss'\n\n/* ------------- Types ------------- */\ninterface DialogItemProps {\n  dialogItem: DialogType\n}\n\n/* ------------- Component ------------- */\nexport const DialogItem: React.FC<DialogItemProps> = ({ dialogItem }) => {\n  const name = reduceLine(dialogItem.userName, 26)\n  const path = dialogItem.id === 9999999 ? 'chat' : dialogItem.id\n\n  return (\n    <li>\n      <NavLink className={isActiveNavLink(cl.userLink, cl.active)} to={`${path}`}>\n        <div className={cl.avatar}>\n          <Avatar photo={dialogItem.photos.small} />\n        </div>\n        <div className={cl.name}>{name}</div>\n        <p className={cl.message}>{reduceLine('last message placeholder', 26)}</p>\n        <time className={cl.time}>{convertDateFormat(dialogItem.lastDialogActivityDate, false)}</time>\n        {dialogItem.newMessagesCount > 0 && <div className={cl.messageCounter}>{dialogItem.newMessagesCount}</div>}\n      </NavLink>\n    </li>\n  )\n}\n","import { DialogType } from \"../../redux/messenger/types\"\nimport { DialogItem } from \"./DialogItem/DialogItem\"\nimport cl from './DialogsBlock.module.scss'\n\n/* ------------- Types ------------- */\nexport interface DialogsBlockProps {\n  dialogs: DialogType[]\n}\n\n/* ------------- Component ------------- */\nconst DialogsBlock: React.FC<DialogsBlockProps> = ({ dialogs }) => {\n  return (\n    <div className={cl.dialogsWrapper}>\n      <ul className={cl.dialogs}>\n        {dialogs.map((dialog) => (<DialogItem key={dialog.id} dialogItem={dialog} />))}\n      </ul>\n    </div>\n  )\n}\n\nexport default DialogsBlock","import React, { useEffect, useState } from \"react\"\nimport { StatusType } from \"../../redux/chat/types\"\nimport { DialogType, MessageType } from \"../../redux/messenger/types\"\nimport cl from './MessagesBlock.module.scss'\nimport MessagesWrapper from \"./MessagesWrapper/MessagesWrapper\"\n\n/* ------------- Types ------------- */\ninterface MessagesBlockProps {\n  pathName: string\n  isDialogSelected: boolean\n  authProfileId: number\n  authProfilePhoto: string\n  currentDialog: DialogType\n  messages: MessageType[]\n  fetchMessagesPending: number[]\n  fetchChatMessagesStatus: StatusType\n  navigate: (path: string) => void\n  sendMessage: (messageBody: string) => void\n}\n\n/* ------------- Component ------------- */\nconst MessagesBlock: React.FC<MessagesBlockProps> = ({\n  pathName,\n  isDialogSelected,\n  authProfileId,\n  authProfilePhoto,\n  messages,\n  currentDialog,\n  navigate,\n  fetchChatMessagesStatus,\n  fetchMessagesPending,\n  sendMessage,\n}) => {\n  const [newMessage, setNewMessage] = useState('')\n  const currentDialogId = currentDialog && currentDialog.id\n  const isWsChatSelected = currentDialogId === 9999999\n\n  useEffect(() => {\n    const callBack = (e: KeyboardEvent) => {\n      if(e.key === 'Escape' && fetchMessagesPending.every(id => id !== currentDialog.id)) {\n        navigate('messenger')\n      }\n    }\n    window.addEventListener('keydown', callBack)\n    return () => {\n      window.removeEventListener('keydown', callBack)\n    }\n  }, [])\n\n  const handleSending = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if(e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault()\n      sendMessage(newMessage)\n      setNewMessage('')\n    }\n  }\n\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => setNewMessage(e.target.value)\n\n  return (\n    <div className={cl.messagesBlock}>\n      <MessagesWrapper\n        pathName={pathName}\n        authProfileId={authProfileId}\n        authProfilePhoto={authProfilePhoto}\n        currentDialog={currentDialog}\n        isDialogSelected={isDialogSelected}\n        messages={messages}\n        fetchChatMessagesStatus={fetchChatMessagesStatus}\n        fetchMessagesPending={fetchMessagesPending}\n      />\n      {isDialogSelected && (\n        <div className={cl.textAreaWrapper}>\n          <textarea\n            value={newMessage}\n            disabled={fetchChatMessagesStatus === 'pending' && isWsChatSelected}\n            placeholder={(fetchChatMessagesStatus !== 'ready' && isWsChatSelected) ? 'Reconnect to the channel..' : 'Write message'}\n            className={cl.newMessageField}\n            onKeyDown={handleSending}\n            onChange={handleChange}\n          />\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default MessagesBlock\n\n\n","import React from 'react'\nimport DialogsBlock from '../../components/DialogsBlock/DialogsBlock'\nimport MessagesBlock from '../../components/MessagesBlock/MessagesBlock'\nimport { StatusType } from '../../redux/chat/types'\nimport { DialogType, MessageType } from '../../redux/messenger/types'\nimport cl from './MessengerPage.module.scss'\n\n/* ------------- Types ------------- */\ninterface MessengerProps {\n  pathName: string\n  interlocutorId: number\n  authProfileId: number | undefined\n  authProfilePhoto: string | undefined | null\n  isDialogSelected: boolean\n  dialogs: DialogType[]\n  messages: MessageType[] \n  fetchMessagesPending: number[]\n  fetchChatMessagesStatus: StatusType\n  navigate: (path: string) => void\n  sendMessage: (messageBody: string) => void\n}\n\n/* ------------- Component ------------- */\nconst Messenger: React.FC<MessengerProps> = ({\n  isDialogSelected,\n  authProfileId,\n  authProfilePhoto,\n  interlocutorId,\n  pathName,\n  dialogs,\n  messages,\n  fetchChatMessagesStatus,\n  fetchMessagesPending,\n  navigate,\n  sendMessage,\n}) => {\n  const currentDialog = dialogs.filter((dialog) => dialog.id === interlocutorId)[0]\n\n  return (\n    <div className={cl.messenger}>\n      <DialogsBlock dialogs={dialogs} />\n      <MessagesBlock\n        pathName={pathName}\n        currentDialog={currentDialog}\n        isDialogSelected={isDialogSelected}\n        authProfileId={authProfileId!}\n        authProfilePhoto={authProfilePhoto!}\n        messages={messages}\n        sendMessage={sendMessage}\n        fetchChatMessagesStatus={fetchChatMessagesStatus}\n        fetchMessagesPending={fetchMessagesPending}\n        navigate={navigate}\n      />\n    </div>\n  )\n}\n\nexport default Messenger\n\n","import { useEffect } from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { compose } from \"redux\";\nimport ErrorPopUp from \"../../components/common/ErrorPopUp/ErrorPopUp\";\nimport withAuthenticatedRedirect from \"../../components/hoc/withAuthRedirect\";\nimport { RouteType, withRoute } from \"../../components/hoc/withRoute\";\nimport { sendChatMessageThunk } from '../../redux/chat/thunks';\nimport { fetchDialogsThunk, fetchMessagesThunk, sendMessageThunk } from '../../redux/messenger/thunks';\nimport { RootState } from \"../../redux/store\";\nimport MessengerPage from \"./MessengerPage\";\n\n/* ------------- Component ------------- */\nconst MessengerPageContainerApi: React.FC<MessengerPageContainerProps> = ({\n  route,\n  dialogs,\n  dialogMessages,\n  chatMessages,\n  authProfileId,\n  authProfilePhoto,\n  fetchChatMessagesStatus,\n  fetchMessagesPending,\n  fetchMessagesError, //bug handle error\n  fetchDialogsError, //bug handle error\n  sendMessageError, //bug handle error\n  fetchDialogsThunk,\n  fetchMessagesThunk,\n  sendMessageThunk,\n  sendChatMessageThunk,\n}) => {\n  const userId = parseInt(route.params.userId)\n  const isWsChatSelected = (route.location.pathname === '/messenger/chat') ? true : false\n  const isDialogSelected = isWsChatSelected || userId ? true : false\n  const messages = (isWsChatSelected ? chatMessages : dialogMessages[userId]) || [] \n  const sendMessage = isWsChatSelected ? sendChatMessageThunk : sendMessageThunk.bind(null, userId)\n  const dialogsWithChat = [\n    {\n      id: 9999999,\n      userName: 'WebSocket Chat',\n      hasNewMessages: true,\n      lastDialogActivityDate: '2022-05-20T23:06:26.437',\n      lastUserActivityDate: '2022-05-20T23:06:26.437',\n      newMessagesCount: 0,\n      photos: { small: null, large: null },\n    },\n    ...dialogs\n  ]\n\n  useEffect(() => {\n    fetchDialogsThunk()\n  }, [fetchDialogsThunk])\n\n  useEffect(() => {\n    if(messages[userId]) {\n      return\n    }\n    if(userId) {\n      fetchMessagesThunk(userId)\n    }\n  }, [userId])\n\n  return (\n    <>\n      <ErrorPopUp titlesArray={[fetchMessagesError, fetchDialogsError, sendMessageError]}/>\n      <MessengerPage\n        navigate={route.navigate}\n        pathName={route.location.pathname}\n        interlocutorId={userId || 9999999}\n        isDialogSelected={isDialogSelected}\n        authProfilePhoto={authProfilePhoto}\n        authProfileId={authProfileId}\n        dialogs={dialogsWithChat}\n        messages={messages}\n        sendMessage={sendMessage}\n        fetchChatMessagesStatus={fetchChatMessagesStatus}\n        fetchMessagesPending={fetchMessagesPending}\n      />\n    </>\n  )\n}\n\n/* ------------- Container ------------- */\nconst mapStateToProps = (state: RootState) => {\n  return {\n    dialogs: state.messenger.dialogs,\n    dialogMessages: state.messenger.messages,\n    chatMessages: state.chat.messages,\n    authProfilePhoto: state.auth.user?.photos?.small,\n    fetchChatMessagesStatus: state.chat.requests.fetchChatMessagesStatus,\n    fetchMessagesPending: state.messenger.requests.fetchMessagesPending,\n    createDialogError: state.messenger.requests.createDialogError,\n    fetchMessagesError: state.messenger.requests.fetchMessagesError,  \n    fetchDialogsError: state.messenger.requests.fetchMessagesError, \n    sendMessageError: state.messenger.requests.sendMessageError, \n    authProfileId: state.auth.user?.id, \n  };\n};\n\nconst mapDispatchToProps = {\n  fetchDialogsThunk,\n  fetchMessagesThunk,\n  sendMessageThunk,\n  sendChatMessageThunk,\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps)\ntype MessengerContainer = ConnectedProps<typeof connector>\ninterface MessengerPageContainerProps extends MessengerContainer, RouteType {}\n\nexport default compose<any>(\n  connector,\n  withRoute,\n  withAuthenticatedRedirect,\n)(MessengerPageContainerApi)"],"sourceRoot":""}