{"version":3,"file":"static/js/669.c48c987f.chunk.js","mappings":"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","sources":["api/users.ts","redux/users/actions.ts","webpack://react-samurai-way/./src/screens/People/People.module.scss?358d","screens/People/People.tsx","screens/People/PeopleContainer.tsx","redux/users/thunks.ts"],"sourcesContent":["import { IUser } from '../redux/users/types'\nimport api from './api'\n\n/* ------------- Types ------------- */\nexport interface GetUsersListApiResponse {\n  items: IUser[],\n  totalCount: number,\n  error: string | null\n}\n\nexport interface FollowUserApiResponse {\n  resultCode: 0 | 1,\n  messages: (string | void)[]\n  data: {}\n}\n\nexport interface UnFollowUserApiResponse {\n  resultCode: 0 | 1,\n  messages: (string | void)[]\n  data: {}\n}\n\n/* ------------- Api ------------- */\nexport const fetchUsersApi = (currentPage = 1, pageItemsCount = 10, term = '', friend: null | boolean = null) => \n  api.get<GetUsersListApiResponse>\n  (`users?page=${currentPage}&count=${pageItemsCount}&term=${term}${friend !== null ? `&friend=${friend}` : ''}`)\n\nexport const followUserApi = (id: number) => api.post<FollowUserApiResponse>(`follow/${id}`)\n\nexport const unfollowUserApi = (id: number) => api.delete<UnFollowUserApiResponse>(`follow/${id}`)\n\n\n//https://social-network.samuraijs.com/api/1.0/users?page=1&count=10&friend=true\n//https://social-network.samuraijs.com/api/1.0/users?page=1&count=10&term=Ivan","import { IUser, LastRequestType, UsersConstants } from \"./types\"\n\n/* ------------- Types ------------- */\nexport interface FetchUsersRequest extends ReturnType<typeof fetchUsersRequest> {}\nexport interface FetchUsersSuccess extends ReturnType<typeof fetchUsersSuccess> {}\nexport interface FetchUsersFailure extends ReturnType<typeof fetchUsersFailure> {}\n\nexport interface ToggleFollowOnUserRequest extends ReturnType<typeof toggleFollowOnUserRequest> {}\nexport interface ToggleFollowOnUserSuccess extends ReturnType<typeof toggleFollowOnUserSuccess> {}\nexport interface ToggleFollowOnUserFailure extends ReturnType<typeof toggleFollowOnUserFailure> {}\n\nexport interface SetTotalUsersCount extends ReturnType<typeof setTotalUsersCount> {}\nexport interface SetCurrentUsersPage extends ReturnType<typeof setCurrentUsersPage> {}\nexport interface ClearUsersState extends ReturnType<typeof clearUsersState> {}\nexport interface SetLastRequest extends ReturnType<typeof setLastRequest> {}\n\nexport type UsersAction =\n  | FetchUsersRequest\n  | FetchUsersSuccess\n  | FetchUsersFailure\n  | SetTotalUsersCount\n  | SetCurrentUsersPage\n  | ClearUsersState\n  | SetLastRequest\n  | ToggleFollowOnUserRequest\n  | ToggleFollowOnUserSuccess\n  | ToggleFollowOnUserFailure\n\n/* ------------- Actions ------------- */\nexport const fetchUsersRequest = () => {\n  return <const>{ type: UsersConstants.FETCH_USERS_REQUEST }\n}\n\nexport const fetchUsersSuccess = (users: IUser[]) => {\n  return <const>{ type: UsersConstants.FETCH_USERS_SUCCESS, payload: users }\n}\n\nexport const fetchUsersFailure = (error: string) => {\n  return <const>{ type: UsersConstants.FETCH_USERS_FAILURE, payload: error }\n}\n\nexport const toggleFollowOnUserRequest = (id: number) => {\n  return <const>{ type: UsersConstants.TOGGLE_FOLLOW_ON_USER_REQUEST, payload: id }\n}\n\nexport const toggleFollowOnUserSuccess = (userId: number) => {\n  return <const>{ type: UsersConstants.TOGGLE_FOLLOW_ON_USER_SUCCESS, payload: userId }\n}\n\nexport const toggleFollowOnUserFailure = (payload: {error: string, id: number}) => {\n  return <const>{ type: UsersConstants.TOGGLE_FOLLOW_ON_USER_FAILURE, payload }\n}\n\nexport const setTotalUsersCount = (totalCount: number) => {\n  return <const>{ type: UsersConstants.SET_TOTAL_USERS_COUNT, payload: totalCount }\n}\n\nexport const setCurrentUsersPage = (currentPage: number) => {\n  return <const>{ type: UsersConstants.SET_CURRENT_USERS_PAGE, payload: currentPage }\n}\n\nexport const setLastRequest = (lastRequest: LastRequestType) => {\n  return <const>{ type: UsersConstants.SET_LAST_REQUEST, payload: lastRequest }\n}\n\nexport const clearUsersState = () => {\n  return <const>{ type: UsersConstants.CLEAR_USERS_STATE }\n}","// extracted by mini-css-extract-plugin\nexport default {\"usersIFollowSection\":\"People_usersIFollowSection__39ZG3\",\"usersSection\":\"People_usersSection__VskVb\",\"usersTabs\":\"People_usersTabs__VsuMq\",\"tabItem\":\"People_tabItem__isqtH\",\"active\":\"People_active__D2Ugv\",\"totalCount\":\"People_totalCount__C0pGJ\",\"tabsRow\":\"People_tabsRow__AIi67\",\"searchInput\":\"People_searchInput__8Hyyr\",\"usersList\":\"People_usersList__6b4jx\",\"usersNav\":\"People_usersNav__tx1sz\",\"usersNavItem\":\"People_usersNavItem__CUz1A\"};","import React, { useEffect, useRef } from 'react'\nimport { NavLink, Outlet } from 'react-router-dom'\nimport MyButton from '../../components/common/MyButton/MyButton'\nimport Preloader from '../../components/common/Preloader/Preloader'\nimport { getPagesAmount, isActiveNavLink } from '../../helpers/helpers'\nimport { IUser } from '../../redux/users/types'\nimport cl from './People.module.scss'\n\ninterface PeopleProps {\n  usersList: IUser[]\n  totalUsersCount: number\n  isUsersFetching: boolean\n  currentPage: number\n  maxPageItemsCount: number\n  isSubscribePending: number[]\n  searchInput: string\n  navigate: (link: string) => void\n  setSearchInput: (searchInput: string) => void\n  toggleFollowOnUser: (userId: number, followed: boolean) => void\n  setCurrentPage: (page: number) => void\n}\n\nconst People: React.FC<PeopleProps> = (props) => {\n  const {\n    totalUsersCount,\n    isUsersFetching,\n    currentPage,\n    maxPageItemsCount,\n    usersList,\n    isSubscribePending,\n    searchInput,\n    toggleFollowOnUser,\n    setCurrentPage,\n    setSearchInput,\n    navigate\n  } = props\n\n  const observedElement = useRef<HTMLDivElement>(null)\n  const observer = useRef<IntersectionObserver | null>(null)\n\n  useEffect(() => {\n    if (isUsersFetching) {\n      return\n    }\n    if(observer.current){ \n      observer.current.disconnect()\n    }\n    observer.current = new IntersectionObserver((entries) => {\n      if (\n        entries[0].isIntersecting &&\n        currentPage < getPagesAmount(totalUsersCount, maxPageItemsCount)\n      ) {\n        setCurrentPage(currentPage + 1)\n      }\n    })\n    observer.current.observe(observedElement.current!)\n  }, [isUsersFetching, currentPage, maxPageItemsCount, setCurrentPage, totalUsersCount]) \n  //'maxPageItemsCount', 'setCurrentPage', and 'totalUsersCount'\n\n  return (\n    <>\n      <section className={cl.usersIFollowSection}>\n        <section className={cl.usersSection}>\n          <div className={cl.usersTabs}>\n            <div className={cl.tabsRow}>\n              <div className={`${cl.tabItem} ${cl.active}`}>\n                <span>All developers </span>\n                <span className={cl.totalCount}>{totalUsersCount}</span>\n              </div>\n              <div className={cl.tabItem}>Developers online</div>\n            </div>\n            <div className={cl.buttonContainer}>\n              <MyButton callBack={() => navigate('people')}>Find developers</MyButton>\n            </div>\n          </div>\n          <input\n            placeholder={'Search users I follow'}\n            className={cl.searchInput}\n            type=\"text\"\n            value={searchInput}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchInput(e.target.value)}\n          />\n          <div className={cl.usersList}>\n            <Outlet context={{usersList, isSubscribePending, toggleFollowOnUser}} />\n          </div>\n          {isUsersFetching ? (<Preloader width=\"50px\" height=\"50px\" position=\"absolute\" />) : (<div ref={observedElement}></div>)}\n        </section>\n        <nav className={cl.usersNav}>\n          <NavLink to=\"developersIFollow\" className={isActiveNavLink(cl.usersNavItem, cl.active)} >People I follow</NavLink>\n          <NavLink to=\"/people\" end className={isActiveNavLink(cl.usersNavItem, cl.active)} >Find Developers</NavLink>\n          <div className={cl.usersNavItem}>Placeholder</div>\n          <div className={cl.usersNavItem}>Placeholder</div>\n          <div className={cl.usersNavItem}>Placeholder</div>\n        </nav>\n      </section>\n    </>\n  )\n}\n\nexport default People","import React, { useEffect, useRef, useState } from 'react'\nimport { RootState } from '../../redux/store'\nimport { fetchUsersThunk } from '../../redux/users/thunks'\nimport { clearUsersState } from '../../redux/users/actions';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { compose } from 'redux';\nimport { setCurrentUsersPage } from '../../redux/users/actions';\nimport { toggleFollowOnUserThunk } from '../../redux/users/thunks';\nimport People from './People';\nimport { RouteType, withRoute } from '../../components/hoc/withRoute';\nimport { ErrorPopUp } from '../../components/common/ErrorPopUp/ErrorPopUp';\n\nconst PeopleContainerApi: React.FC<PeopleContainerProps & RouteType> = ({\n  fetchUsersThunk,\n  clearUsersState,\n  currentPage,\n  route,\n  isSubscribePending,\n  isUsersFetching,\n  maxPageItemsCount,\n  setCurrentUsersPage,\n  toggleFollowOnUserThunk,\n  totalUsersCount,\n  usersList,\n  toggleFollowOnUserError,\n  fetchUsersError\n}) => {\n  const {location: {pathname}, navigate} = route\n\n  const [searchInput, setSearchInput] = useState('')\n\n  useEffect(() => {\n    clearUsersState()\n  }, [pathname, searchInput, clearUsersState]) //clearUsersState\n\n  useEffect(() => {\n    switch(pathname) {\n      case '/people':\n        fetchUsersThunk(currentPage, searchInput)\n        return\n      case '/people/developersIFollow':\n       fetchUsersThunk(currentPage, searchInput, true)\n       return\n    }\n  }, [currentPage, searchInput, pathname, fetchUsersThunk]) //searchInput, pathname, fetchUsersThunk\n\n  return (\n    <>\n      {/* <ErrorPopUp titlesArray={toggleFollowOnUserError}/>\n      <ErrorPopUp titlesArray={fetchUsersError}/> */}\n      <ErrorPopUp titlesArray={[toggleFollowOnUserError, fetchUsersError]}/>\n      <People\n        searchInput={searchInput}\n        currentPage={currentPage}\n        maxPageItemsCount={maxPageItemsCount}\n        isUsersFetching={isUsersFetching}\n        totalUsersCount={totalUsersCount}\n        usersList={usersList}\n        isSubscribePending={isSubscribePending}\n        navigate={navigate}\n        setSearchInput={setSearchInput}\n        toggleFollowOnUser={toggleFollowOnUserThunk}\n        setCurrentPage={setCurrentUsersPage}\n      />\n    </>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    toggleFollowOnUserError: state.users.requests.toggleFollowOnUserError,\n    fetchUsersError: state.users.requests.fetchUsersError, \n    usersList: state.users.users,\n    currentPage: state.users.currentUsersPage,\n    maxPageItemsCount: state.users.maxPageItemsCount,\n    totalUsersCount: state.users.totalUsersCount,\n    isUsersFetching: state.users.requests.fetchUsersPending,\n    isSubscribePending: state.users.requests.toggleFollowOnUserPending\n  }\n} \n\nconst mapDispatchToProps = {\n  clearUsersState,\n  fetchUsersThunk,\n  setCurrentUsersPage,\n  toggleFollowOnUserThunk\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps)\nexport type PeopleContainerProps = ConnectedProps<typeof connector>\n\nexport default compose<any>(connector, withRoute)(PeopleContainerApi)","import { fetchUsersApi, followUserApi, unfollowUserApi } from \"../../api/users\"\nimport { AppDispatch, RootState } from \"../store\"\nimport { setTotalUsersCount, fetchUsersFailure, fetchUsersRequest, fetchUsersSuccess, toggleFollowOnUserFailure, toggleFollowOnUserRequest, toggleFollowOnUserSuccess } from \"./actions\"\n\nexport const fetchUsersThunk = (currentUsersPage = 1, term = '', friend = null as null | boolean) => {\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      dispatch(fetchUsersRequest())\n      const { users: { maxPageItemsCount } } = getState()\n      const { data: response } = await fetchUsersApi(currentUsersPage, maxPageItemsCount, term, friend)\n      if(!response.error) {\n        dispatch(setTotalUsersCount(response.totalCount))\n        dispatch(fetchUsersSuccess(response.items))\n      }else {\n        dispatch(fetchUsersFailure(response.error))\n      }\n    }catch(e) {\n      console.log(e)\n      dispatch(fetchUsersFailure('An error occurred during fetching developers'))\n    }\n  }\n}\n\nexport const toggleFollowOnUserThunk = (userId: number, followed: boolean) => {\n  return async ( dispatch: AppDispatch ) => {\n    try{\n      dispatch(toggleFollowOnUserRequest(userId))\n      const apiMethod = followed ? unfollowUserApi : followUserApi\n      const { data: response} = await apiMethod(userId)\n      if(response.resultCode === 0) {\n        dispatch(toggleFollowOnUserSuccess(userId))\n      }else if(response.resultCode === 1) {\n        dispatch(toggleFollowOnUserFailure({error: response.messages[0]!, id: userId}))\n      }\n    }catch(e) {\n      console.log(e)\n      dispatch(toggleFollowOnUserFailure({error: 'An error occurred during follow/unfollow on user', id: userId}))\n    }\n  }\n}\n\n\n\n"],"names":["fetchUsersApi","currentPage","pageItemsCount","term","friend","api","followUserApi","id","unfollowUserApi","fetchUsersRequest","type","UsersConstants","fetchUsersSuccess","users","payload","fetchUsersFailure","error","toggleFollowOnUserSuccess","userId","toggleFollowOnUserFailure","setTotalUsersCount","totalCount","props","totalUsersCount","isUsersFetching","maxPageItemsCount","usersList","isSubscribePending","searchInput","toggleFollowOnUser","setCurrentPage","setSearchInput","navigate","observedElement","useRef","observer","useEffect","current","disconnect","IntersectionObserver","entries","isIntersecting","getPagesAmount","observe","className","cl","MyButton","callBack","placeholder","value","onChange","e","target","context","Preloader","width","height","position","ref","to","isActiveNavLink","end","mapDispatchToProps","clearUsersState","fetchUsersThunk","currentUsersPage","dispatch","getState","response","data","items","console","log","setCurrentUsersPage","toggleFollowOnUserThunk","followed","apiMethod","resultCode","messages","connector","connect","state","toggleFollowOnUserError","requests","fetchUsersError","fetchUsersPending","toggleFollowOnUserPending","compose","withRoute","route","pathname","location","useState","ErrorPopUp","titlesArray"],"sourceRoot":""}