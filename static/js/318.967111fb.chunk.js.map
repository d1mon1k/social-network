{"version":3,"file":"static/js/318.967111fb.chunk.js","mappings":"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","sources":["components/hoc/withAuthRedirect.tsx","webpack://react-samurai-way/./src/screens/Dialogs/Dialogs.module.scss?1c1f","webpack://react-samurai-way/./src/screens/Dialogs/DialogItem/DialogItem.module.scss?5b59","screens/Dialogs/DialogItem/DialogItem.tsx","webpack://react-samurai-way/./src/screens/Dialogs/Message/Message.module.scss?d9c2","screens/Dialogs/Message/Message.tsx","screens/Dialogs/Dialogs.tsx","screens/Dialogs/DialogsContainer.tsx","redux/dialogs/dialogs-ac.ts"],"sourcesContent":["import { connect, ConnectedProps } from 'react-redux'\nimport { Navigate } from 'react-router-dom'\nimport { RootState } from '../../redux/store'\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    isAuth: state.auth.user?.data.login\n  }\n}\n\nexport const withAuthenticatedRedirect = (Component: any) => {\n  const withAuthenticatedRedirectComponent = (props: PropsFromRedux) =>  {\n    if(!props.isAuth) {\n      return <Navigate to='/login'/>\n    }\n    return <Component {...props} />\n  }\n\n  const connector = connect(mapStateToProps)\n  type PropsFromRedux = ConnectedProps<typeof connector>\n  const ConnectedAuthenticatedRedirectComponent = connector(withAuthenticatedRedirectComponent)\n\n  return ConnectedAuthenticatedRedirectComponent\n}\n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogsPage\":\"Dialogs_dialogsPage__djCAJ\",\"dialogs\":\"Dialogs_dialogs__w6BpA\",\"dialogBlock\":\"Dialogs_dialogBlock__FJHH3\",\"dialogsWrapper\":\"Dialogs_dialogsWrapper__kF3KL\",\"conversationWrapper\":\"Dialogs_conversationWrapper__qGsMU\",\"conversation\":\"Dialogs_conversation__awFeN\",\"newMessage\":\"Dialogs_newMessage__qYkf3\"};","// extracted by mini-css-extract-plugin\nexport default {\"userLink\":\"DialogItem_userLink__8HCBB\",\"active\":\"DialogItem_active__Zs+v5\",\"time\":\"DialogItem_time__3AlQQ\",\"message\":\"DialogItem_message__z5bV6\",\"messageCounter\":\"DialogItem_messageCounter__x6S4T\",\"avatar\":\"DialogItem_avatar__sYULj\",\"name\":\"DialogItem_name__vfRmA\"};","import cl from './DialogItem.module.scss'\nimport { NavLink } from 'react-router-dom'\nimport Avatar from '../../../components/Avatar/Avatar'\nimport { getRightDateFormat, isActiveNavLink, reduceLine } from '../../../helpers/helpers'\n\ninterface DialogItemProps {\n  id: number\n  name: string\n  lastMessage: string\n  time: number\n  counter: number\n  photo: string | undefined\n}\n\nexport const DialogItem: React.FC<DialogItemProps> = ({\n  counter,\n  id,\n  lastMessage,\n  name,\n  photo,\n  time\n}) => {\n    return (\n    <li>\n      <NavLink className={isActiveNavLink(cl.userLink, cl.active)} to={`${id}`}>\n        <div className={cl.avatar}>\n          <Avatar photo={photo}/>\n        </div>\n        <div className={cl.name} >{reduceLine(name)}</div>\n        <p className={cl.message}>{reduceLine(lastMessage)}</p>\n        <time className={cl.time}>{getRightDateFormat(time)}</time>\n        {(counter > 0) && <div className={cl.messageCounter}>{counter}</div>}\n      </NavLink>\n    </li>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"messageColumn\":\"Message_messageColumn__AW9wg\",\"avatar\":\"Message_avatar__XZA1P\",\"name\":\"Message_name__F1uHx\",\"time\":\"Message_time__WTmSM\",\"message\":\"Message_message__wc-sy\"};","import cl from \"./Message.module.scss\";\nimport Avatar from \"../../../components/Avatar/Avatar\";\n\ninterface MessageProps {\n  key: number\n  message: string\n  photo: string | undefined\n}\n\nexport const Message: React.FC<MessageProps> = (props) => {\n  return (\n    <li className={cl.messageColumn}>\n      <div className={cl.avatar}>\n        <Avatar photo={props.photo} />\n      </div>\n      <div>\n        <span className={cl.name}>Marina</span>\n        <time className={cl.time} >20:00</time>\n      </div>\n      <p className={cl.message}>{props.message}</p>\n    </li>\n  );\n};\n","import React, { useEffect, useRef } from 'react'\nimport cl from './Dialogs.module.scss'\nimport { DialogItem } from './DialogItem/DialogItem'\nimport { Message } from './Message/Message'\nimport { PropsFromRedux } from './DialogsContainer'\nimport { Field, Form } from 'react-final-form'\n\ninterface Props extends PropsFromRedux {}\n\nconst Dialogs: React.FC<Props> = ({dialogsPage, ...props}) => {\n  const conversationWrapper = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    conversationWrapper.current?.scrollTo(0, 99999)\n  }, [dialogsPage.messages])\n\n  const messages = dialogsPage.messages.map((message) => {\n    return (\n      <Message photo={props.ProfilePhoto} key={message.id} message={message.text} />\n    )\n  })\n\n  const dialogs = dialogsPage.dialogs.map((dialog) => {\n    return (\n      <DialogItem\n        key={dialog.id}\n        id={dialog.id}\n        name={dialog.name}\n        lastMessage={dialog.lastMessage}\n        time={dialog.time}\n        counter={dialog.counter}\n        photo={props.ProfilePhoto}\n      />\n    )\n  })\n\n  return (\n    <div className={cl.dialogsPage}>\n      <div className={cl.dialogsWrapper}>\n        <ul className={cl.dialogs}>{dialogs}</ul>\n      </div>\n      <div className={cl.dialogBlock}>\n        <div ref={conversationWrapper} className={cl.conversationWrapper}>\n          <ul className={cl.conversation}>{messages}</ul>\n        </div>\n        <ReduxForm setMessages={props.setMessages} />\n      </div>\n    </div>\n  )\n}\n\n/* ------------- ReduxForm component ------------- */\nconst ReduxForm = (props: {setMessages: (message: string) => {}}) => {\n  const submitHandler = (values: {newMessage: string}) => {\n    props.setMessages(values.newMessage)\n    values.newMessage = ''\n  }\n\n  const onPressHandler = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      document.getElementById('form')!.dispatchEvent(new Event('submit', { cancelable: true, bubbles: true }))\n      e.preventDefault()\n    }\n  }\n\n  return (\n    <Form\n      onSubmit={submitHandler}\n      render={(props) => {\n        return (\n          <form id=\"form\" onSubmit={props.handleSubmit}>\n            <Field\n              name=\"newMessage\"\n              placeholder=\"Write a message (reduxForm)\"\n              className={cl.newMessage}\n              component=\"textarea\"\n              onKeyPress={onPressHandler}\n            />\n          </form>\n        )\n      }}\n    />\n  )\n}\n\nexport default Dialogs\n","import { connect, ConnectedProps } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { withAuthenticatedRedirect } from \"../../components/hoc/withAuthRedirect\";\nimport { setMessages } from \"../../redux/dialogs/dialogs-ac\";\nimport { RootState } from \"../../redux/store\";\nimport Dialogs from \"./Dialogs\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    ProfilePhoto: state.profile.profile && state.profile.profile.photos.small,\n    dialogsPage: state.dialogsPage,\n  };\n};\n\nconst mapDispatchToProps = {\n  setMessages,\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps)\nexport type PropsFromRedux = ConnectedProps<typeof connector>\n\nexport default compose<any>(\n  connector,\n  withAuthenticatedRedirect\n)(Dialogs)","import { DialogsAction, DialogsActionTypes } from './dialogs-types';\n\nexport const setMessages = (message: string): DialogsAction => {\n  return { type: DialogsActionTypes.SET_MESSAGES, payload: message }\n}\n\n// export const setNewMessage = (message: string): DialogsAction => {\n//   return {\n//     type: DialogsActionTypes.SET_NEW_MESSAGE,\n//     payload: message,\n//   }\n// }"],"names":["mapStateToProps","state","isAuth","auth","user","data","login","DialogItem","counter","id","lastMessage","name","photo","time","className","isActiveNavLink","cl","to","Avatar","reduceLine","getRightDateFormat","Message","props","message","ReduxForm","onPressHandler","e","key","shiftKey","document","getElementById","dispatchEvent","Event","cancelable","bubbles","preventDefault","onSubmit","values","setMessages","newMessage","render","handleSubmit","placeholder","component","onKeyPress","dialogsPage","conversationWrapper","useRef","useEffect","current","scrollTo","messages","map","ProfilePhoto","text","dialogs","dialog","ref","mapDispatchToProps","type","DialogsActionTypes","payload","connector","connect","profile","photos","small","compose","Component","Dialogs"],"sourceRoot":""}