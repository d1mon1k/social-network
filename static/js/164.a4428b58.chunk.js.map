{"version":3,"file":"static/js/164.a4428b58.chunk.js","mappings":"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","sources":["components/hoc/withAuthRedirect.tsx","api/chat.ts","redux/chat/thunks.ts","redux/chat/actions.ts","webpack://react-samurai-way/./src/components/MessagesBlock/MessagesBlock.module.scss?ad1a","components/MessagesBlock/MessagesBlock.tsx","webpack://react-samurai-way/./src/components/DialogsBlock/DialogItem/DialogItem.module.scss?a39f","components/DialogsBlock/DialogItem/DialogItem.tsx","webpack://react-samurai-way/./src/components/DialogsBlock/DialogsBlock.module.scss?a997","components/DialogsBlock/DialogsBlock.tsx","webpack://react-samurai-way/./src/pages/MessengerPage/Messenger.module.scss?e935","pages/MessengerPage/Messenger.tsx","pages/MessengerPage/MessengerContainer.tsx"],"sourcesContent":["import { connect, ConnectedProps } from 'react-redux'\nimport { Navigate } from 'react-router-dom'\nimport { RootState } from '../../redux/store'\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    isAuth: state.auth.user?.data.login\n  }\n}\n\nexport const withAuthenticatedRedirect = (Component: any) => {\n  const withAuthenticatedRedirectComponent = (props: PropsFromRedux) =>  {\n    if(!props.isAuth) {\n      return <Navigate to='/login'/>\n    }\n    return <Component {...props} />\n  }\n\n  const connector = connect(mapStateToProps)\n  type PropsFromRedux = ConnectedProps<typeof connector>\n  const ConnectedAuthenticatedRedirectComponent = connector(withAuthenticatedRedirectComponent)\n\n  return ConnectedAuthenticatedRedirectComponent\n}\n\n\n\n","import { ChatMessageType } from \"../redux/chat/types\"\n\n/* ------------- Types ------------- */\ntype SubscriberType = (messages: ChatMessageType[]) => void\n\n/* ------------- Api ------------- */\nlet subscribers = [] as SubscriberType[]\nlet ws: WebSocket | null = null\n\nconst handleCloseWebSocket = () => {\n  setTimeout(() => createWebSocket, 3000)\n}\n\nconst messageListener = (e: any) => {\n  const newMessages = JSON.parse(e.data)\n  subscribers.forEach(s => s(newMessages))\n}\n\nexport const createWebSocket = () => {\n  ws?.removeEventListener('close', handleCloseWebSocket)\n  ws?.removeEventListener('message', messageListener)\n  ws?.close()\n  ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n  ws?.addEventListener('close', handleCloseWebSocket)\n  ws?.addEventListener('message', messageListener)\n}\n\n/* -------------  ------------- */\n\nexport const subscribe = (callback: SubscriberType) => {\n  subscribers.push(callback)\n  // return () => {\n  //   subscribers = subscribers.filter(s => s !== callback)\n  // }\n}\n\nexport const unsubscribe = (callback: SubscriberType) => {\n  subscribers = subscribers.filter(s => s !== callback)\n}\n\nexport const sendMessage = (message: string) => {\n  ws?.send(message)\n}","import { subscribe, unsubscribe, sendMessage, createWebSocket } from \"../../api/chat\"\nimport { AppDispatch } from \"../store\"\nimport { setMessages } from \"./actions\"\nimport { ChatMessageType } from \"./types\"\n\nlet _newMessageHandler: ((messages: ChatMessageType[]) => void) | null = null\nconst newMessageHandlerCreator = (dispatch: AppDispatch) => {\n  if(_newMessageHandler === null) {\n    _newMessageHandler = (messages: ChatMessageType[]) => {\n      dispatch(setMessages(messages))\n    }\n  }\n  \n  return _newMessageHandler\n}\n\nexport const startMessagesListeningThunk = () => {\n  createWebSocket()\n  return async ( dispatch: AppDispatch ) => {\n    subscribe(newMessageHandlerCreator(dispatch))\n  }\n}\n\nexport const stopMessagesListeningThunk = () => {\n  return async ( dispatch: AppDispatch ) => {\n    unsubscribe(newMessageHandlerCreator(dispatch))\n  }\n}\n\nexport const sendChatMessageThunk = (message: string) => {\n  return async( dispatch: AppDispatch ) => {\n    sendMessage(message)\n  }\n}","import { ChatConstants, ChatMessageType } from \"./types\";\n\nexport interface SetMessages extends ReturnType<typeof setMessages> {}\n\nexport type ChatAction = \n  | SetMessages\n\nexport const setMessages = (messages: ChatMessageType[]) => {\n  return <const>{ type: ChatConstants.SET_MESSAGES , payload: messages }\n}","// extracted by mini-css-extract-plugin\nexport default {\"messagesBlock\":\"MessagesBlock_messagesBlock__lUyFf\",\"messagesWrapper\":\"MessagesBlock_messagesWrapper__BGvrI\",\"emptyChatPlaceholder\":\"MessagesBlock_emptyChatPlaceholder__SbQcB\",\"textareaWrapper\":\"MessagesBlock_textareaWrapper__AyuSx\",\"newMessageField\":\"MessagesBlock_newMessageField__XzIhT\"};","import React, { useEffect, useRef, useState } from \"react\"\nimport { Outlet } from \"react-router-dom\"\nimport { ChatSvg } from \"../../helpers/icons/icons\"\nimport { ChatMessageType } from \"../../redux/chat/types\"\nimport { DialogType, MessageType } from \"../../redux/messenger/types\"\nimport cl from './MessagesBlock.module.scss'\n\n/* ------------- Types ------------- */\ninterface MessagesBlockProps {\n  dialogs: DialogType[]\n  messages: MessageType[]\n  chatMessages: ChatMessageType[]\n  interlocutorId: number\n  authProfileId: number\n  authProfilePhoto: string\n  pathName: string\n  isDialogSelected: boolean\n  fetchMessagesPending: boolean\n  sendChatMessageThunk: (message: string) => void\n  stopMessagesListening: () => void\n  startMessagesListening: () => void\n  sendMessage: (userId: number, messageBody: string) => void\n  clearMessagesState: () => void\n}\n\n/* ------------- Component ------------- */\nconst MessagesBlock: React.FC<MessagesBlockProps> = ({\n  pathName,\n  isDialogSelected,\n  dialogs,\n  messages,\n  chatMessages,\n  interlocutorId,\n  authProfileId,\n  authProfilePhoto,\n  fetchMessagesPending,\n  sendMessage,\n  clearMessagesState,\n  sendChatMessageThunk,\n  startMessagesListening,\n  stopMessagesListening\n}) => {\n  const [newMessage, setNewMessage] = useState('')\n\n  const messagesWrapper = useRef<HTMLDivElement>(null)\n  const isChatSelected = pathName === '/messenger/chat' ? true : false\n  const messagesLength = isChatSelected ? chatMessages.length : messages.length\n\n  useEffect(() => {\n    startMessagesListening()\n    return () => stopMessagesListening()\n  }, [])\n\n  useEffect(() => {\n    messagesWrapper.current?.scrollTo(0, 99999)\n  }, [messages, chatMessages, pathName]) //bug - Заменить pathName на userId\n\n  const handleSending = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if(e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault()\n      if(isChatSelected) {\n        sendChatMessageThunk(newMessage)\n      }else {\n        sendMessage(interlocutorId, newMessage)\n      }\n      setNewMessage('')\n    }\n  }\n\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => setNewMessage(e.target.value)\n\n  return (\n    <div className={cl.messagesBlock}>\n      <div ref={messagesWrapper} className={cl.messagesWrapper}>\n      {!fetchMessagesPending && <EmptyChatPlaceholder isDialogSelected={isDialogSelected} messagesLength={messagesLength}/>}\n      <Outlet context={{ //MessagesList, Chat\n        pathName,\n        authProfileId,\n        authProfilePhoto,\n        dialogs,\n        interlocutorId,\n        messages,\n        clearMessagesState,\n        isDialogSelected,\n        fetchMessagesPending,\n        chatMessages,\n        isChatSelected,\n      }}/>\n      </div>\n      <div className={cl.textareaWrapper}>\n        <textarea\n          onKeyDown={handleSending}\n          value={newMessage}\n          onChange={handleChange}\n          placeholder=\"Write message\"\n          className={cl.newMessageField}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default MessagesBlock\n\n/* ------------- Nested components ------------- */\ninterface EmptyChatPlaceholderProps {\n  messagesLength: number | null\n  isDialogSelected: boolean | null\n}\n\nconst EmptyChatPlaceholder: React.FC<EmptyChatPlaceholderProps> = ({messagesLength, isDialogSelected: isChatSelected}) => {\n  const tip = isChatSelected === false ? 'Select a chat' : 'You can write your first message'\n\n  return (\n    <>\n      {(messagesLength === 0 || isChatSelected === false) && (\n        <div className={cl.emptyChatPlaceholder}>\n          <div><ChatSvg /></div>\n          <div>{tip}</div>\n        </div>\n      )}\n    </>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"userLink\":\"DialogItem_userLink__8wrAN\",\"active\":\"DialogItem_active__QhM4T\",\"time\":\"DialogItem_time__LGIbg\",\"message\":\"DialogItem_message__TG2Gp\",\"messageCounter\":\"DialogItem_messageCounter__oyMyg\",\"avatar\":\"DialogItem_avatar__WYyE9\",\"avatarContainer\":\"DialogItem_avatarContainer__npmV6\",\"name\":\"DialogItem_name__tXQI2\"};","import { NavLink } from 'react-router-dom'\nimport {\n  convertDateFormat,\n  isActiveNavLink,\n  reduceLine,\n} from '../../../helpers/helpers'\nimport { DialogType } from '../../../redux/messenger/types'\nimport Avatar from '../../Avatar/Avatar'\nimport cl from './DialogItem.module.scss'\n\n/* ------------- Types ------------- */\ninterface DialogItemProps {\n  dialogItem?: DialogType\n}\n\n/* ------------- Component ------------- */\nexport const DialogItem: React.FC<DialogItemProps> = ({\n  dialogItem,\n}) => {\n  const path = dialogItem ? dialogItem.id : 'chat'\n  const name = dialogItem ? reduceLine(dialogItem.userName, 26) : 'WebSocket Chat'\n\n  return (\n    <li>\n      <NavLink className={isActiveNavLink(cl.userLink, cl.active)} to={`${path}`}>\n        <div className={cl.avatar}>\n          <Avatar photo={dialogItem && dialogItem.photos.small} />\n        </div>\n        <div className={cl.name}>{name}</div>\n        <p className={cl.message}>{reduceLine('lorem lorem lorem lorem', 26)}</p>\n        <time className={cl.time}>{dialogItem && convertDateFormat(dialogItem.lastDialogActivityDate, false)}</time>\n        {dialogItem && dialogItem.newMessagesCount > 0 && <div className={cl.messageCounter}>{dialogItem && dialogItem.newMessagesCount}</div>}\n      </NavLink>\n    </li>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogsWrapper\":\"DialogsBlock_dialogsWrapper__MEPhg\",\"dialogs\":\"DialogsBlock_dialogs__v0Ldo\"};","import { DialogType } from \"../../redux/messenger/types\"\nimport { DialogItem } from \"./DialogItem/DialogItem\"\nimport cl from './DialogsBlock.module.scss'\n\n/* ------------- Types ------------- */\nexport interface DialogsBlockProps {\n  dialogs: DialogType[]\n}\n\n/* ------------- Component ------------- */\nconst DialogsBlock: React.FC<DialogsBlockProps> = ({\n  dialogs\n}) => {\n  return (\n    <div className={cl.dialogsWrapper}>\n      <ul className={cl.dialogs}>\n        <DialogItem />\n        {dialogs.map((dialog) => (<DialogItem key={dialog.id} dialogItem={dialog} />))}\n      </ul>\n    </div>\n  )\n}\n\nexport default DialogsBlock","// extracted by mini-css-extract-plugin\nexport default {\"messenger\":\"Messenger_messenger__6NGfg\"};","import React, { useState } from 'react'\nimport { DialogType, MessageType } from '../../redux/messenger/types'\nimport MessagesBlock from '../../components/MessagesBlock/MessagesBlock'\nimport DialogsBlock from '../../components/DialogsBlock/DialogsBlock'\nimport cl from './Messenger.module.scss'\nimport { ChatMessageType } from '../../redux/chat/types'\n\n/* ------------- Types ------------- */\ninterface MessengerProps {\n  interlocutorId: number\n  dialogs: DialogType[]\n  messages: MessageType[]\n  chatMessages: ChatMessageType[]\n  authProfileId: number | undefined\n  authProfilePhoto: string | undefined | null\n  pathName: string\n  isDialogSelected: boolean\n  fetchMessagesPending: boolean\n  sendChatMessageThunk: (message: string) => void\n  stopMessagesListening: () => void\n  startMessagesListening: () => void\n  sendMessage: (userId: number, messageBody: string) => void\n  clearMessagesState: () => void\n}\n\n/* ------------- Component ------------- */\nconst Messenger: React.FC<MessengerProps> = ({\n  pathName,\n  dialogs,\n  messages,\n  chatMessages,\n  authProfileId,\n  authProfilePhoto,\n  interlocutorId,\n  fetchMessagesPending,\n  sendMessage,\n  clearMessagesState,\n  isDialogSelected,\n  sendChatMessageThunk,\n  startMessagesListening,\n  stopMessagesListening\n}) => {\n\n  return (\n    <div className={cl.messenger}>\n      <DialogsBlock dialogs={dialogs} />\n      <MessagesBlock\n        sendChatMessageThunk={sendChatMessageThunk}\n        stopMessagesListening={stopMessagesListening}\n        startMessagesListening={startMessagesListening}\n        fetchMessagesPending={fetchMessagesPending}\n        isDialogSelected={isDialogSelected}\n        pathName={pathName}\n        clearMessagesState={clearMessagesState}\n        sendMessage={sendMessage}\n        authProfileId={authProfileId!}\n        authProfilePhoto={authProfilePhoto!}\n        dialogs={dialogs}\n        interlocutorId={interlocutorId}\n        messages={messages}\n        chatMessages={chatMessages}\n      />\n    </div>\n  )\n}\n\nexport default Messenger\n\n","import { useEffect } from \"react\";\nimport { compose } from \"redux\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { RootState } from \"../../redux/store\";\nimport { withAuthenticatedRedirect } from \"../../components/hoc/withAuthRedirect\";\nimport { RouteType, withRoute } from \"../../components/hoc/withRoute\";\nimport { fetchDialogsThunk, fetchMessagesThunk, sendMessageThunk } from '../../redux/messenger/thunks'\nimport { clearMessagesState } from '../../redux/messenger/actions'\nimport { startMessagesListeningThunk, stopMessagesListeningThunk, sendChatMessageThunk } from '../../redux/chat/thunks';\nimport Messenger from \"./Messenger\";\n\n/* ------------- Component ------------- */\nconst MessengerContainerApi: React.FC<MessengerContainerProps> = ({\n  route,\n  dialogs,\n  messages,\n  chatMessages,\n  authProfileId,\n  authProfilePhoto,\n  fetchMessagesPending,\n  fetchMessagesError,\n  fetchDialogsError,\n  sendMessageError,\n  fetchDialogsThunk,\n  fetchMessagesThunk,\n  sendMessageThunk,\n  sendChatMessageThunk,\n  startMessagesListening,\n  stopMessagesListening,\n  clearMessagesState,\n}) => {\n  const userId = parseInt(route.params.userId)\n  const isDialogSelected = (route.location.pathname === '/messenger/chat') || userId ? true : false\n\n  useEffect(() => {\n    fetchDialogsThunk()\n  }, [fetchDialogsThunk])\n\n  useEffect(() => {\n    if(userId) {\n      fetchMessagesThunk(userId)\n    }\n  }, [userId])\n\n  return (\n    <Messenger\n      isDialogSelected={isDialogSelected}\n      pathName={route.location.pathname}\n      interlocutorId={userId}\n      authProfilePhoto={authProfilePhoto}\n      authProfileId={authProfileId}\n      messages={messages}\n      chatMessages={chatMessages}\n      dialogs={dialogs}\n      sendMessage={sendMessageThunk}\n      fetchMessagesPending={fetchMessagesPending}\n      clearMessagesState={clearMessagesState}\n      sendChatMessageThunk={sendChatMessageThunk}\n      startMessagesListening={startMessagesListening}\n      stopMessagesListening={stopMessagesListening}\n    />\n  )\n}\n\n/* ------------- Container ------------- */\nconst mapStateToProps = (state: RootState) => {\n  return {\n    dialogs: state.messenger.dialogs,\n    messages: state.messenger.messages,\n    chatMessages: state.chat.messages,\n    fetchMessagesPending: state.messenger.requests.fetchMessagesPending,\n    fetchMessagesError: state.messenger.requests.fetchMessagesError,  //+++\n    fetchDialogsError: state.messenger.requests.fetchMessagesError, //+++\n    sendMessageError: state.messenger.requests.sendMessageError, //+++\n    authProfileId: state.auth.user?.data.id,\n    authProfilePhoto: state.auth.user?.data.photos?.small\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchDialogsThunk,\n  fetchMessagesThunk,\n  sendMessageThunk,\n  sendChatMessageThunk,\n  clearMessagesState,\n  startMessagesListening: startMessagesListeningThunk,\n  stopMessagesListening: stopMessagesListeningThunk\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps)\nexport type MessengerContainer = ConnectedProps<typeof connector>\ninterface MessengerContainerProps extends MessengerContainer, RouteType {}\n\nexport default compose<any>(\n  connector,\n  withRoute,\n  withAuthenticatedRedirect,\n)(MessengerContainerApi)"],"names":["mapStateToProps","state","isAuth","auth","user","data","login","subscribers","ws","handleCloseWebSocket","setTimeout","createWebSocket","messageListener","e","newMessages","JSON","parse","forEach","s","removeEventListener","close","WebSocket","addEventListener","unsubscribe","callback","filter","sendMessage","message","send","_newMessageHandler","newMessageHandlerCreator","dispatch","messages","type","ChatConstants","payload","setMessages","pathName","isDialogSelected","dialogs","chatMessages","interlocutorId","authProfileId","authProfilePhoto","fetchMessagesPending","clearMessagesState","sendChatMessageThunk","startMessagesListening","stopMessagesListening","useState","newMessage","setNewMessage","messagesWrapper","useRef","isChatSelected","messagesLength","length","useEffect","current","scrollTo","className","cl","ref","EmptyChatPlaceholder","context","onKeyDown","key","shiftKey","preventDefault","value","onChange","target","placeholder","tip","DialogItem","dialogItem","path","id","name","reduceLine","userName","isActiveNavLink","to","Avatar","photo","photos","small","convertDateFormat","lastDialogActivityDate","newMessagesCount","map","dialog","mapDispatchToProps","fetchDialogsThunk","fetchMessagesThunk","sendMessageThunk","push","connector","connect","messenger","chat","requests","fetchMessagesError","fetchDialogsError","sendMessageError","compose","withRoute","Component","props","route","userId","parseInt","params","location","pathname"],"sourceRoot":""}