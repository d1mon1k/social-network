{"version":3,"file":"static/js/746.2e7eabac.chunk.js","mappings":"mLACA,EAAgC,+BAAhC,EAAwE,wBAAxE,EAAuG,sBAAvG,EAAoI,sBAApI,EAAoK,yB,SCavJA,EAAkC,SAAC,GAMzC,IALLC,EAKI,EALJA,QACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,KACAC,EACI,EADJA,OAMA,OACE,gBAAIC,UAAWC,EAAf,WACE,gBAAKD,UAAWC,EAAhB,UAA2B,SAACC,EAAA,EAAD,CAAQH,OAAQA,EAAQF,MAAOA,OAC1D,4BACE,4BACE,SAAC,KAAD,CAAMM,GAAE,mBAAcJ,GAAUC,UAAWC,EAA3C,SAAqDL,KACrD,iBAAMI,UAAWC,EAAjB,SAA4BH,OAVf,SAACH,GAAD,OACnBA,EAAQS,MAAM,UAAUC,KAAI,SAACC,EAAMC,GAAP,OAAiB,cAAeP,UAAWC,EAA1B,SAAuCK,GAA/BC,MAWhDC,CAAab,W,oGChCtB,EAA2B,uB,SCkD3B,EAjCa,WACX,OAAuFc,EAAAA,EAAAA,MAA/EC,EAAR,EAAQA,aAAR,EAAuBC,eAAvB,EAAuCC,gBAAvC,EAAwDC,SAAxD,EAAkEC,iBAgBlE,OACE,eAAId,UAAWC,EAAf,SACGS,EAAaL,KAAI,SAACU,EAAYC,GAC7B,OAAO,SAACtB,EAAA,EAAD,CAELC,QAASoB,EAAWpB,QACpBC,KAAMmB,EAAWE,SACjBpB,MAAOkB,EAAWlB,MAClBC,MAAMoB,EAAAA,EAAAA,IAAkB,2BAA2B,GACnDnB,OAAQgB,EAAWhB,QALdiB","sources":["webpack://react-samurai-way/./src/components/MessagesBlock/MessagesList/Message/Message.module.scss?5e3d","components/MessagesBlock/MessagesList/Message/Message.tsx","webpack://react-samurai-way/./src/pages/Chat/Chat.module.scss?38d8","pages/Chat/Chat.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"messageColumn\":\"Message_messageColumn__dg7kE\",\"avatar\":\"Message_avatar__2XoxZ\",\"name\":\"Message_name__lCP6t\",\"time\":\"Message_time__JMhLm\",\"message\":\"Message_message__2hjMw\"};","import { Link } from \"react-router-dom\";\nimport Avatar from \"../../../Avatar/Avatar\";\nimport cl from \"./Message.module.scss\";\n\n/* ------------- Types ------------- */\ninterface MessageProps {\n  message: string\n  photo: string | null | undefined\n  name: string\n  time: string\n  userId: number\n}\n\n/* ------------- Component ------------- */\nexport const Message: React.FC<MessageProps> = ({\n  message,\n  name,\n  photo,\n  time,\n  userId\n}) => {\n  const messageParse = (message: string) => (\n    message.split('<br />').map((item, index) => <p key={index} className={cl.message}>{item}</p>)\n  )\n\n  return (\n    <li className={cl.messageColumn}>\n      <div className={cl.avatar}><Avatar userId={userId} photo={photo} /></div>\n      <div>\n        <div>\n          <Link to={`/profile/${userId}`} className={cl.name}>{name}</Link>\n          <time className={cl.time} >{time}</time>\n        </div>\n        {messageParse(message)}\n      </div>\n    </li>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"Chat_messages__wIdAM\"};","import { useEffect, useRef, useState } from 'react'\nimport { useOutletContext } from 'react-router-dom'\nimport { Message } from '../../components/MessagesBlock/MessagesList/Message/Message'\nimport { convertDateFormat } from '../../helpers/helpers'\nimport { ChatMessageType } from '../../redux/chat/types'\nimport cl from './Chat.module.scss'\n\n\n/* ------------- Types ------------- */\ninterface OutletContextType {\n  chatMessages: ChatMessageType[]\n  isChatSelected: boolean\n  setChatMessages: React.Dispatch<React.SetStateAction<[] | ChatMessageType[]>>\n  pathName: string\n  webSocketChannel: WebSocket\n}\n\n/* ------------- Component ------------- */\nconst Chat = () => {\n  const { chatMessages , isChatSelected, setChatMessages, pathName, webSocketChannel } = useOutletContext<OutletContextType>()\n\n  // useEffect(() => {\n  //   const newMessageListener = (e: any) => {\n  //     setChatMessages(prev => [...prev, ...JSON.parse(e.data)])\n  //   }\n  //   if(isChatSelected) {\n  //     webSocketChannel?.removeEventListener('message', newMessageListener)\n  //     webSocketChannel?.addEventListener('message', newMessageListener)\n  //   }\n\n  //   return () => {\n  //     webSocketChannel?.removeEventListener('message', newMessageListener)\n  //   }\n  // }, [webSocketChannel])\n\n  return (\n    <ul className={cl.messages}>\n      {chatMessages.map((messageObj, i) => {\n        return <Message\n          key={i}\n          message={messageObj.message}\n          name={messageObj.userName}\n          photo={messageObj.photo}\n          time={convertDateFormat(\"2022-05-20T23:06:26.437\", false)}\n          userId={messageObj.userId}\n        />\n      })}\n    </ul>\n  )\n}\n\nexport default Chat\n"],"names":["Message","message","name","photo","time","userId","className","cl","Avatar","to","split","map","item","index","messageParse","useOutletContext","chatMessages","isChatSelected","setChatMessages","pathName","webSocketChannel","messageObj","i","userName","convertDateFormat"],"sourceRoot":""}